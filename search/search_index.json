{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Jira Python Utils","text":"<p>This repository houses a versatile collection of Python utility scripts designed to seamlessly interact with Jira issue tracking systems. Elevate your project management workflow with these powerful tools, streamlining tasks and enhancing efficiency. Whether you're retrieving data, automating processes, or integrating with Jira, this collection empowers you to navigate the intricacies of the issue tracking system effortlessly. Explore the possibilities and optimize your development journey with this robust Python project.</p>"},{"location":"#commands","title":"Commands","text":"<p>The following exported scripts are available:</p> <ul> <li>annotate-readme</li> <li>bitbucket-reformat-merge-comment</li> <li>jira-add-change-control-comment</li> <li>jira-add-comment</li> <li>jira-add-component</li> <li>jira-add-label</li> <li>jira-assign-issue</li> <li>jira-convert-task-session-script-to-readme</li> <li>jira-create-issue</li> <li>jira-create-release-software-issues</li> <li>jira-epics-to-confluence-tables</li> <li>jira-get-issue-details</li> <li>jira-initiate-workspace</li> <li>jira-link-issues</li> <li>jira-remove-watcher</li> <li>jira-search-issues</li> <li>jira-start-task</li> <li>jira-sync-workspace</li> <li>jira-to-confluence-weekly-progress-report</li> <li>search-readme</li> </ul>"},{"location":"#references","title":"References","text":"<ul> <li>GitHub</li> <li>PYPI</li> </ul>"},{"location":"INSTALL/","title":"INSTALL","text":""},{"location":"INSTALL/#clone-project","title":"Clone project","text":"<p>You can <code>git clone</code> this project.</p> <pre><code>git clone https://github.com/jai-python3/jira-python-utils.git\ncd jira-python-utils\n</code></pre>"},{"location":"INSTALL/#local-pip-install","title":"Local pip install","text":"<p>You can optionally establish a Python virtual environment. Then you can run the <code>setup.py</code> script to build to project and then run <code>pip install</code> to install in your local Python virtual environment.</p> <pre><code>virtualenv -p python3 venv\nsource venv/bin/activate\npython setup.py sdist\npip install .\n</code></pre>"},{"location":"INSTALL/#uninstall","title":"Uninstall","text":"<p>You can uninstall like this:</p> <pre><code>source venv/bin/activate\npip uninstall jira-python-utils\nmake clean\n</code></pre>"},{"location":"INSTALL/#developers","title":"Developers","text":"<p>If you modify the code in this package in your local virtual environment:</p> <pre><code>pip uninstall jira-python-utils\nmake clean\npython setup.py sdist\npip install .\n</code></pre>"},{"location":"INSTALL/#publish-to-pypi","title":"Publish to PYPI","text":"<p>You want can publish the code in this package to the PYPI repository.</p>"},{"location":"INSTALL/#install-twine-and-setuptools","title":"Install twine and setuptools","text":"<p>Install <code>twine</code> and <code>setuptools</code>.</p> <pre><code>pip install twine setuptools\n</code></pre>"},{"location":"INSTALL/#build-the-distribution-package","title":"Build the Distribution Package","text":"<pre><code>python setup.py sdist bdist_wheel\n</code></pre>"},{"location":"INSTALL/#configure-your-pypirc","title":"Configure your ~/.pypirc:","text":"<pre><code>[pypi]\n  username = __token__\n  password = pypi-YOUR-TOKEN\n</code></pre>"},{"location":"INSTALL/#upload-your-package-to-pypi","title":"Upload Your Package to PyPI","text":"<pre><code>twine upload dist/*\n</code></pre>"},{"location":"INSTALL/#install-from-pypi","title":"Install from PYPI","text":"<p>Now you can install your package in your Python virtual environment</p> <pre><code>pip install jira-python-utils\n</code></pre>"},{"location":"annotate_readme/","title":"Annotate README.md module","text":"<p>Start a Jira task.</p>"},{"location":"annotate_readme/#jira_python_utils.annotate_readme.annotate_readme","title":"<code>annotate_readme(jira_id, logfile, outdir, readme, jira_base_url=DEFAULT_JIRA_BASE_URL, verbose=constants.DEFAULT_VERBOSE)</code>","text":"<p>Annotate the README.md file.</p> <p>Parameters:</p> Name Type Description Default <code>jira_id</code> <code>str</code> <p>The Jira ticket identifier.</p> required <code>logfile</code> <code>str</code> <p>The log file.</p> required <code>outdir</code> <code>str</code> <p>The output directory.</p> required <code>readme</code> <code>str</code> <p>The README.md to be annotated/updated.</p> required <code>verbose</code> <code>bool</code> <p>The verbose flag.</p> <code>DEFAULT_VERBOSE</code> Source code in <code>jira_python_utils/annotate_readme.py</code> <pre><code>def annotate_readme(\n        jira_id: str,\n        logfile : str,\n        outdir: str,\n        readme: str,\n        jira_base_url: str = DEFAULT_JIRA_BASE_URL,\n        verbose: bool = constants.DEFAULT_VERBOSE\n    ) -&gt; None:\n    \"\"\"Annotate the README.md file.\n\n    Args:\n        jira_id (str): The Jira ticket identifier.\n        logfile (str): The log file.\n        outdir (str): The output directory.\n        readme (str): The README.md to be annotated/updated.\n        verbose (bool): The verbose flag.\n    \"\"\"\n    logging.info(f\"Will backup '{readme}'\")\n\n    bakfile = backup_file(readme)\n    # Read all lines in the file to an array\n    lines = []\n\n    logging.info(f\"Will attempt to read lines from '{bakfile}'\")\n    with open(bakfile, 'r') as infile:\n        lines = infile.readlines()\n\n    outlines = []\n    current_step = 0\n\n    # Expected header information\n    jira_id_encountered = False\n    jira_url_reference_encountered = False\n    keywords_encountered = False\n    codebase_encountered = False\n    date_created_encountered = False\n    due_date_encountered = False\n    date_completed_encountered = False\n    status_encountered = False\n    issue_type_encountered = False\n\n    jira_id_line = None\n    jira_url_reference_line = None\n    keywords_line = None\n    codebase_line = None\n    date_created_line = None\n    due_date_line = None\n    date_completed_line = None\n    status_line = None\n    issue_type_line = None\n\n    line_ctr = 0\n\n    for line in lines:\n        line_ctr += 1\n        if line_ctr == 1:\n            if line.startswith(\"# Jira ID: \"): # This should appear on the first line\n                logging.info(f\"Jira ID encountered on line {line_ctr}\")\n                jira_id_encountered = True\n                jira_id_line = line\n                continue\n\n        elif line.lower().startswith(\"reference: \"):\n            logging.info(f\"Reference encountered on line {line_ctr}\")\n            jira_url_reference_encountered = True\n            jira_url_reference_line = line\n            continue\n\n        elif line.lower().startswith(\"keywords: \"):\n            logging.info(f\"Keywords encountered on line {line_ctr}\")\n            keywords_encountered = True\n            keywords_line = line\n            continue\n\n        elif line.lower().startswith(\"codebase: \"):\n            logging.info(f\"Codebase encountered on line {line_ctr}\")\n            codebase_encountered = True\n            codebase_line = line\n            continue\n\n        elif line.lower().startswith(\"date-created: \"):\n            logging.info(f\"Date-created encountered on line {line_ctr}\")\n            date_created_encountered = True\n            date_created_line = line\n            continue\n\n        elif line.lower().startswith(\"date-completed: \"):\n            logging.info(f\"Date-completed encountered on line {line_ctr}\")\n            date_completed_encountered = True\n            date_completed_line = line\n            continue\n\n        elif line.lower().startswith(\"due-date: \"):\n            logging.info(f\"Due-date encountered on line {line_ctr}\")\n            due_date_encountered = True\n            due_date_line = line\n            continue\n\n        elif line.lower().startswith(\"status: \"):\n            logging.info(f\"Status encountered on line {line_ctr}\")\n            status_encountered = True\n            status_line = line\n            continue\n\n        elif line.lower().startswith(\"issue-type: \"):\n            logging.info(f\"Issue-type encountered on line {line_ctr}\")\n            issue_type_encountered = True\n            issue_type_line = line\n            continue\n\n        # Use regex to check if line starts with ## Step and then a number\n        elif re.match(r\"## Step \\d+\", line):\n            current_step += 1\n            # Use regex to replace the step number with the Jira ID\n            outline = re.sub(r\"## Step \\d+\", f\"## Step {current_step}\", line)\n            outlines.append(outline)\n\n        elif line.startswith(\"## \"):\n            current_step += 1\n            outline = line.replace(\"## \", f\"## Step {current_step} - \")\n            outlines.append(outline)\n            continue\n        else:\n            outlines.append(line)\n            continue\n\n    logging.info(f\"Will attempt to write annotated '{readme}'\")\n\n    with open(readme, 'w') as outfile:\n        if not jira_id_encountered:\n            outfile.write(f\"# Jira ID: {jira_id}\\n\\n\")\n        else:\n            outfile.write(f\"{jira_id_line}\")\n\n        if not jira_url_reference_encountered:\n            outfile.write(f\"Reference: {jira_base_url}{jira_id}\\n\\n\")\n        else:\n            outfile.write(f\"{jira_url_reference_line}\")\n\n        if not keywords_encountered:\n            keywords = get_keywords()\n            keywords_str = ', '.join(keywords)\n            outfile.write(f\"Keywords: {keywords_str}\\n\\n\")\n        else:\n            outfile.write(f\"{keywords_line}\")\n\n        if not codebase_encountered:\n            codebase = get_codebase()\n            outfile.write(f\"Codebase: {codebase}\\n\\n\")\n        else:\n            outfile.write(f\"{codebase_line}\")\n\n        current_date = None\n        if not date_created_encountered:\n            dt = get_date(\"date-created\", current_date=current_date)\n            outfile.write(f\"date-created: {dt}\\n\\n\")\n            current_date = dt\n        else:\n            outfile.write(f\"{date_created_line}\")\n\n        if not due_date_encountered:\n            dt = get_date(\"due-date\", current_date=current_date)\n            outfile.write(f\"due-date: {dt}\\n\\n\")\n            current_date = dt\n        else:\n            outfile.write(f\"{due_date_line}\")\n\n        if not date_completed_encountered:\n            dt = get_date(\"date-completed\", current_date=current_date)\n            outfile.write(f\"date-completed: {dt}\\n\\n\")\n        else:\n            outfile.write(f\"{date_completed_line}\")\n\n\n        if not status_encountered:\n            status = get_status()\n            outfile.write(f\"status: {status}\\n\\n\")\n        else:\n            outfile.write(f\"{status_line}\")\n\n        if not issue_type_encountered:\n            issue_type = get_issue_type()\n            outfile.write(f\"issue-type: {issue_type}\\n\\n\")\n        else:\n            outfile.write(f\"{issue_type_line}\")\n\n\n        for line in outlines:\n            outfile.write(line)\n\n    if verbose:\n        console.print(f\"Wrote annotated '{readme}'\")\n        logging.info(f\"Wrote annotated '{readme}'\")\n</code></pre>"},{"location":"annotate_readme/#jira_python_utils.annotate_readme.get_codebase","title":"<code>get_codebase()</code>","text":"<p>Prompt the user for the name of the codebase.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Name of the codebase.</p> Source code in <code>jira_python_utils/annotate_readme.py</code> <pre><code>def get_codebase() -&gt; str:\n    \"\"\"Prompt the user for the name of the codebase.\n\n    Returns:\n        str: Name of the codebase.\n    \"\"\"\n    codebase = click.prompt(\"Enter the name of the codebase\", default=\"\")\n    return codebase\n</code></pre>"},{"location":"annotate_readme/#jira_python_utils.annotate_readme.get_keywords","title":"<code>get_keywords()</code>","text":"<p>Prompt the user for the keywords.</p> <p>Returns:</p> Type Description <code>list</code> <p>List[str]: The list of keywords.</p> Source code in <code>jira_python_utils/annotate_readme.py</code> <pre><code>def get_keywords() -&gt; list:\n    \"\"\"Prompt the user for the keywords.\n\n    Returns:\n        List[str]: The list of keywords.\n    \"\"\"\n    keywords = []\n    while True:\n        keyword = click.prompt(\"Enter a keyword (or press Enter to end)\", default=\"\")\n        if keyword == \"\":\n            break\n        keywords.append(keyword)\n    return keywords\n</code></pre>"},{"location":"annotate_readme/#jira_python_utils.annotate_readme.main","title":"<code>main(jira_id, logfile, outdir, readme, verbose)</code>","text":"<p>Annotate/update the README.md file.</p> Source code in <code>jira_python_utils/annotate_readme.py</code> <pre><code>@click.command()\n@click.option('--jira_id', help='Required: The Jira ticket identifier')\n@click.option('--logfile', help=\"Optional: The log file\")\n@click.option('--outdir', help=f\"Optional: The default is the current working directory - default is '{DEFAULT_OUTDIR}'\")\n@click.option('--readme', help='Required: The README.md to be annotated/updated')\n@click.option('--verbose', is_flag=True, help=f\"Will print more info to STDOUT - default is '{constants.DEFAULT_VERBOSE}'.\", callback=validate_verbose)\ndef main(\n    jira_id: str,\n    logfile: Optional[str],\n    outdir: Optional[str],\n    readme: str,\n    verbose: Optional[bool]\n    ):\n    \"\"\"Annotate/update the README.md file.\"\"\"\n\n    error_ctr = 0\n\n    if jira_id is None:\n        print_red(\"--jira_id was not specified\")\n        error_ctr += 1\n\n    if readme is None:\n        print_red(\"--readme was not specified\")\n        error_ctr += 1\n\n    if error_ctr &gt; 0:\n        print_red(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    check_infile_status(readme, \"md\")\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n    if verbose is None:\n        verbose = constants.DEFAULT_VERBOSE\n        print_yellow(f\"--verbose was not specified and therefore was set to '{verbose}'\")\n\n\n    logging.basicConfig(\n        filename=logfile,\n        format=constants.LOGGING_FORMAT,\n        level=constants.LOG_LEVEL\n    )\n\n    annotate_readme(\n        jira_id,\n        logfile,\n        outdir,\n        readme,\n        jira_base_url=DEFAULT_JIRA_BASE_URL,\n        verbose=constants.DEFAULT_VERBOSE\n    )\n\n    if verbose:\n        console.print(f\"The log file is '{logfile}'.\")\n        print_green(f\"Execution of '{os.path.abspath(__file__)}' completed.\")\n</code></pre>"},{"location":"annotate_readme/#jira_python_utils.annotate_readme.validate_verbose","title":"<code>validate_verbose(ctx, param, value)</code>","text":"<p>Validate the validate option.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The click context.</p> required <code>param</code> <code>str</code> <p>The parameter.</p> required <code>value</code> <code>bool</code> <p>The value.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>The value.</p> Source code in <code>jira_python_utils/annotate_readme.py</code> <pre><code>def validate_verbose(ctx, param, value):\n    \"\"\"Validate the validate option.\n\n    Args:\n        ctx (Context): The click context.\n        param (str): The parameter.\n        value (bool): The value.\n\n    Returns:\n        bool: The value.\n    \"\"\"\n\n    if value is None:\n        click.secho(\"--verbose was not specified and therefore was set to 'True'\", fg='yellow')\n        return constants.DEFAULT_VERBOSE\n    return value\n</code></pre>"},{"location":"bitbucket_reformat_merge_comment/","title":"Bitbucket Reformat Merge Comment module","text":"<p>This script will reformat the content of the Bitbucket merge comment.</p>"},{"location":"bitbucket_reformat_merge_comment/#jira_python_utils.bitbucket_reformat_merge_comment.main","title":"<code>main(infile, logfile, outdir, outfile)</code>","text":"<p>The main function.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>The file containing the raw Bitbucket merge text.</p> required <code>logfile</code> <code>str</code> <p>The log file.</p> required <code>outdir</code> <code>str</code> <p>The output directory.</p> required <code>outfile</code> <code>str</code> <p>The output file.</p> required Source code in <code>jira_python_utils/bitbucket_reformat_merge_comment.py</code> <pre><code>@click.command()\n@click.option('--infile', help='The file containing the raw Bitbucket merge text')\n@click.option('--logfile', help=\"The log file\")\n@click.option('--outdir', help=f\"The default is the current working directory - default is '{DEFAULT_OUTDIR}'\")\n@click.option('--outfile', help=\"The output file\")\ndef main(infile: str, logfile: str, outdir: str, outfile: str):\n    \"\"\"The main function.\n\n    Args:\n        infile (str): The file containing the raw Bitbucket merge text.\n        logfile (str): The log file.\n        outdir (str): The output directory.\n        outfile (str): The output file.\n    \"\"\"\n    error_ctr = 0\n\n    if infile is None:\n        print_red(\"--infile was not specified\")\n        error_ctr += 1\n\n    if error_ctr &gt; 0:\n        print(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n    if outfile is None:\n        outfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.txt'\n        )\n        print_yellow(f\"--outfile was not specified and therefore was set to '{outfile}'\")\n\n    logging.basicConfig(\n        filename=logfile,\n        format=LOGGING_FORMAT,\n        level=LOG_LEVEL\n    )\n\n    reformat_content(infile, logfile, outdir, outfile)\n</code></pre>"},{"location":"bitbucket_reformat_merge_comment/#jira_python_utils.bitbucket_reformat_merge_comment.reformat_content","title":"<code>reformat_content(infile)</code>","text":"<p>Reformat the content of the Bitbucket merge comment.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>The file containing the raw Bitbucket merge text.</p> required Source code in <code>jira_python_utils/bitbucket_reformat_merge_comment.py</code> <pre><code>def reformat_content(infile: str) -&gt; None:\n    \"\"\"Reformat the content of the Bitbucket merge comment.\n\n    Args:\n        infile (str): The file containing the raw Bitbucket merge text.\n    \"\"\"\n    logging.info(f\"Will read file '{infile}'\")\n\n    lines = None\n\n    with open(infile, 'r') as f:\n        lines = f.readlines()\n\n    lines.reverse()\n    logging.info(f\"Read '{len(lines)}' from file '{infile}'\")\n\n    lookup = {}\n    current_issue_id = None\n\n    line_ctr = 0\n\n    issue_id_list = []\n    unique_issue_id_lookup = {}\n    for line in lines:\n        logging.info(f\"{line=}\")\n\n        line_ctr += 1\n        line = line.strip()\n        if line == '':\n            continue\n        elif line.startswith('BIO-') or line.startswith('SYN-BIO-'):\n            current_issue_id = line.strip()\n            if current_issue_id not in unique_issue_id_lookup:\n                issue_id_list.append(current_issue_id)\n                unique_issue_id_lookup[current_issue_id] = True\n\n            if current_issue_id not in lookup:\n                lookup[current_issue_id] = []\n            continue\n        else:\n            lookup[current_issue_id].append(line)\n\n    issue_id_list.reverse()\n    print(\"Here is the reformatted Bitbucket merge comment:\")\n    for issue_id in issue_id_list:\n        print(f\"\\n{issue_id}:\")\n        comments = lookup[issue_id]\n        comments.reverse()\n        for comment in comments:\n            print(comment)\n</code></pre>"},{"location":"console_helper/","title":"Console Helper module","text":"<p>The console helper module provides functions for printing colored messages to the console.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the message is not defined.</p>"},{"location":"console_helper/#jira_python_utils.console_helper.print_green","title":"<code>print_green(msg)</code>","text":"<p>Print the message in green.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to be printed to STDOUT.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>If the message is not defined.</p> Source code in <code>jira_python_utils/console_helper.py</code> <pre><code>def print_green(msg: str) -&gt; None:\n    \"\"\"Print the message in green.\n\n    Args:\n        msg (str): The message to be printed to STDOUT.\n\n    Raises:\n        Exception: If the message is not defined.\n    \"\"\"\n    if msg is None or msg == \"\":\n        raise Exception(\"msg was not defined\")\n\n    console.print(f\"[bold green]{msg}[/]\")\n</code></pre>"},{"location":"console_helper/#jira_python_utils.console_helper.print_red","title":"<code>print_red(msg)</code>","text":"<p>Print the message in red.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to be printed to STDERR.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>If the message is not defined.</p> Source code in <code>jira_python_utils/console_helper.py</code> <pre><code>def print_red(msg: str) -&gt; None:\n    \"\"\"Print the message in red.\n\n    Args:\n        msg (str): The message to be printed to STDERR.\n\n    Raises:\n        Exception: If the message is not defined.\n    \"\"\"\n    if msg is None or msg == \"\":\n        raise Exception(\"msg was not defined\")\n    error_console.print(msg)\n</code></pre>"},{"location":"console_helper/#jira_python_utils.console_helper.print_yellow","title":"<code>print_yellow(msg=None)</code>","text":"<p>Print the message in yellow.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to be printed to STDOUT.</p> <code>None</code> <p>Raises:</p> Type Description <code>Exception</code> <p>If the message is not defined.</p> Source code in <code>jira_python_utils/console_helper.py</code> <pre><code>def print_yellow(msg: str = None) -&gt; None:\n    \"\"\"Print the message in yellow.\n\n    Args:\n        msg (str): The message to be printed to STDOUT.\n\n    Raises:\n        Exception: If the message is not defined.\n    \"\"\"\n    if msg is None or msg == \"\":\n        raise Exception(\"msg was not defined\")\n\n    console.print(f\"[bold yellow]{msg}[/]\")\n</code></pre>"},{"location":"file_utils/","title":"File Utils module","text":"<p>A collection of utility functions for file management and data integrity.</p> <p>Functions: - calculate_md5(file_path): Calculate the MD5 hash of a file specified by its path. - check_indir_status(indir=None): Check the status of a directory, providing information on its existence and contents. - check_infile_status(infile, extension=None): Check the status of a file, including its existence and optionally validate its extension. - get_file_creation_date(file_path): Retrieve the creation date of a file specified by its path.</p> <p>Use these functions to enhance file handling and data validation in your Python projects.</p>"},{"location":"file_utils/#jira_python_utils.file_utils.calculate_md5","title":"<code>calculate_md5(file_path)</code>","text":"<p>Calculate the md5 checksum for the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>the file for which the md5 checksum will be calculated</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the calculated md5 checksum</p> Source code in <code>jira_python_utils/file_utils.py</code> <pre><code>def calculate_md5(file_path: str) -&gt; str:\n    \"\"\"Calculate the md5 checksum for the specified file.\n\n    Args:\n        file_path (str): the file for which the md5 checksum will be calculated\n\n    Returns:\n        str: the calculated md5 checksum\n    \"\"\"\n    md5_hash = hashlib.md5()\n    logging.info(f\"Will attempt to calculate the MD5 checksum for file '{file_path}'\")\n\n    with open(file_path, \"rb\") as file:\n        # Read the file in chunks to efficiently handle large files\n        for chunk in iter(lambda: file.read(4096), b\"\"):\n            md5_hash.update(chunk)\n\n    return md5_hash.hexdigest()\n</code></pre>"},{"location":"file_utils/#jira_python_utils.file_utils.check_indir_status","title":"<code>check_indir_status(indir=None)</code>","text":"<p>Check if the directory exists and is a regular directory.</p> <p>Parameters:</p> Name Type Description Default <code>indir</code> <code>str</code> <p>the directory to be checked</p> <code>None</code> Source code in <code>jira_python_utils/file_utils.py</code> <pre><code>def check_indir_status(indir: str = None) -&gt; None:\n    \"\"\"Check if the directory exists and is a regular directory.\n\n    Args:\n        indir (str): the directory to be checked\n    \"\"\"\n    error_ctr = 0\n\n    if indir is None or indir == '':\n        error_console.print(f\"'{indir}' is not defined\")\n        error_ctr += 1\n    else:\n        if not os.path.exists(indir):\n            error_ctr += 1\n            error_console.print(f\"directory '{indir}' does not exist\")\n        else:\n            if not os.path.isdir(indir):\n                error_ctr += 1\n                error_console.print(f\"'{indir}' is not a regular directory\")\n\n    if error_ctr &gt; 0:\n        error_console.print(f\"Detected problems with input directory '{indir}'\")\n        sys.exit(1)\n</code></pre>"},{"location":"file_utils/#jira_python_utils.file_utils.check_infile_status","title":"<code>check_infile_status(infile, extension=None)</code>","text":"<p>Check if the file exists, if it is a regular file and whether it has content.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>the file to be checked</p> required Source code in <code>jira_python_utils/file_utils.py</code> <pre><code>def check_infile_status(infile: str, extension: Optional[str] = None) -&gt; None:\n    \"\"\"Check if the file exists, if it is a regular file and whether it has\n    content.\n\n    Args:\n        infile (str): the file to be checked\n\n    Raises:\n        None\n    \"\"\"\n\n    error_ctr = 0\n\n    if infile is None or infile == \"\":\n        error_console.print(f\"'{infile}' is not defined\")\n        error_ctr += 1\n    else:\n        if not os.path.exists(infile):\n            error_ctr += 1\n            error_console.print(f\"'{infile}' does not exist\")\n        else:\n            if not os.path.isfile(infile):\n                error_ctr += 1\n                error_console.print(f\"'{infile}' is not a regular file\")\n            if os.stat(infile).st_size == 0:\n                error_console.print(f\"'{infile}' has no content\")\n                error_ctr += 1\n            if extension is not None and not infile.endswith(extension):\n                error_console.print(\n                    f\"'{infile}' does not have filename extension '{extension}'\"\n                )\n                error_ctr += 1\n\n    if error_ctr &gt; 0:\n        error_console.print(f\"Detected problems with input file '{infile}'\")\n        sys.exit(1)\n</code></pre>"},{"location":"file_utils/#jira_python_utils.file_utils.get_file_creation_date","title":"<code>get_file_creation_date(file_path)</code>","text":"<p>Determine the creation date for the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>the absolute path of the file</p> required <p>Returns:</p> Name Type Description <code>datetime</code> <code>datetime</code> <p>the date the file was created according to the operating system</p> Source code in <code>jira_python_utils/file_utils.py</code> <pre><code>def get_file_creation_date(file_path: str) -&gt; datetime:\n    \"\"\"Determine the creation date for the specified file.\n\n    Args:\n        file_path (str): the absolute path of the file\n\n    Returns:\n        datetime: the date the file was created according to the operating system\n    \"\"\"\n    if platform.system() == \"Windows\":\n        # On Windows, use creation time\n        creation_time = os.path.getctime(file_path)\n    else:\n        # On Unix-based systems, use birth time (creation time)\n        # Note: Not all file systems support birth time, and it might not be available on some systems.\n        stat_info = os.stat(file_path)\n        creation_time = stat_info.st_mtime\n\n    # Convert the timestamp to a readable date\n    creation_date = datetime.fromtimestamp(creation_time)\n\n    return creation_date\n</code></pre>"},{"location":"helper/","title":"Helper module","text":""},{"location":"helper/#jira_python_utils.helper.get_auth","title":"<code>get_auth(credential_file, url)</code>","text":"<p>Instantiate the JIRA object.</p> <p>Parameters:</p> Name Type Description Default <code>credential_file</code> <code>str</code> <p>the credentials file</p> required <code>url</code> <code>str</code> <p>the REST URL</p> required <p>Returns:</p> Name Type Description <code>JIRA</code> <p>The JIRA class instance</p> Source code in <code>jira_python_utils/helper.py</code> <pre><code>def get_auth(credential_file: str, url: str):\n    \"\"\"Instantiate the JIRA object.\n\n    Args:\n        credential_file (str): the credentials file\n        url: the REST URL\n\n    Returns:\n        JIRA: The JIRA class instance\n    \"\"\"\n    username, password = get_credentials(credential_file)\n\n    options = {\n        'server': url,\n        'verify': False\n    }\n\n    auth_jira = JIRA(options=options, basic_auth=(username, password))\n\n    if auth_jira is None:\n        error_console.print(f\"Could not instantiate JIRA for url '{url}'\")\n        sys.exit(1)\n\n    return auth_jira\n</code></pre>"},{"location":"helper/#jira_python_utils.helper.get_auth_jira","title":"<code>get_auth_jira(credential_file, url)</code>","text":"<p>Instantiate the JIRA object.</p> <p>Parameters:</p> Name Type Description Default <code>credential_file</code> <code>str</code> <p>the credentials file</p> required <code>url</code> <code>str</code> <p>the REST URL</p> required <p>Returns:</p> Name Type Description <code>JIRA</code> <p>The JIRA class instance</p> Source code in <code>jira_python_utils/helper.py</code> <pre><code>def get_auth_jira(credential_file: str, url: str):\n    \"\"\"Instantiate the JIRA object.\n\n    Args:\n        credential_file (str): the credentials file\n        url: the REST URL\n\n    Returns:\n        JIRA: The JIRA class instance\n    \"\"\"\n    username, password = get_username_password(credential_file)\n\n    options = {\n        'server': url,\n        'verify': False\n    }\n\n    logging.info(f\"options: {options}\")\n\n    auth_jira = JIRA(\n        options=options,\n        basic_auth=(username, password)\n    )\n\n    if auth_jira is None:\n        error_console.print(f\"Could not instantiate JIRA for url '{url}'\")\n        sys.exit(1)\n\n    auth = (username, password)\n\n    return auth_jira, auth\n</code></pre>"},{"location":"helper/#jira_python_utils.helper.get_credentials","title":"<code>get_credentials(credential_file)</code>","text":"<p>Parse the credential file and retrieve the username and password.</p> <p>Parameters:</p> Name Type Description Default <code>credential_file</code> <code>str</code> <p>The credential file.</p> required <p>Returns:</p> Type Description <code>(str, str)</code> <p>Tuple[str,str]: The username and password.</p> Source code in <code>jira_python_utils/helper.py</code> <pre><code>def get_credentials(credential_file: str) -&gt; (str, str):\n    \"\"\"Parse the credential file and retrieve the username and password.\n\n    Args:\n        credential_file (str): The credential file.\n\n    Returns:\n        Tuple[str,str]: The username and password.\n    \"\"\"\n    with open(credential_file, 'r') as f:\n        line = f.readline()\n        line = line.strip()\n\n        (username, password) = line.split(':')\n\n        if username is None or username == \"\":\n            raise Exception(f\"username is empty in file '{credential_file}'\")\n\n        if password is None or password == \"\":\n            raise Exception(f\"password is empty in file '{credential_file}'\")\n\n        console.print(\"read username and password from credentials file\")\n    return (username, password)\n</code></pre>"},{"location":"helper/#jira_python_utils.helper.get_rest_url","title":"<code>get_rest_url(rest_url_file)</code>","text":"<p>Get the REST URL from the file.</p> <p>Parameters:</p> Name Type Description Default <code>rest_url_file</code> <code>str</code> <p>The path to the file containing the REST URL.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The REST URL.</p> Source code in <code>jira_python_utils/helper.py</code> <pre><code>def get_rest_url(rest_url_file: str) -&gt; str:\n    \"\"\"Get the REST URL from the file.\n\n    Args:\n        rest_url_file (str): The path to the file containing the REST URL.\n\n    Returns:\n        str: The REST URL.\n    \"\"\"\n    with open(rest_url_file, 'r') as f:\n        url = f.readline()\n        url = url.strip()\n        console.print(f\"Retrieved the REST URL from file '{rest_url_file}'\")\n    return url\n</code></pre>"},{"location":"helper/#jira_python_utils.helper.get_username_password","title":"<code>get_username_password(credential_file)</code>","text":"<p>Parse the credential file and retrieve the username and password.</p> Source code in <code>jira_python_utils/helper.py</code> <pre><code>def get_username_password(credential_file: str) -&gt; Tuple[str,str]:\n    \"\"\"Parse the credential file and retrieve the username and password.\"\"\"\n    with open(credential_file, 'r') as f:\n        line = f.readline()\n        line = line.strip()\n        (username, password) = line.split(':')\n        console.print(f\"read username and password from credentials file '{credential_file}'\")\n        return username, password\n</code></pre>"},{"location":"jira_add_change_control_comment/","title":"Jira Add Change Control Comment module","text":"<p>Add a comment to a JIRA issue with the change control information.</p>"},{"location":"jira_add_change_control_comment/#jira_python_utils.jira_add_change_control_comment.main","title":"<code>main(change_control_id, credential_file, config_file, compliance123_base_url, docusign_base_url, issue, interactive)</code>","text":"<p>Add change control content to a Jira ticket.</p> <p>Parameters:</p> Name Type Description Default <code>change_control_id</code> <code>str</code> <p>The change control identifier.</p> required <code>credential_file</code> <code>Optional[str]</code> <p>The credential file containing username and password.</p> required <code>config_file</code> <code>Optional[str]</code> <p>The config ini file.</p> required <code>compliance123_base_url</code> <code>str</code> <p>The 123Compliance URL base for change control.</p> required <code>docusign_base_url</code> <code>str</code> <p>The DocuSign URL base for the change control.</p> required <code>issue</code> <code>str</code> <p>The JIRA issue identifier e.g.: JP-478.</p> required <code>interactive</code> <code>Optional[bool]</code> <p>Run in interactive mode.</p> required <p>This will insert a comment in the specified JIRA issue like this: Change control [CR-01958|123Compliance_root_URL/base_URL_for_this_change_control/] has been prepared in 123Compliance.</p> <p>Change control has been prepared in DocuSign and sent to the following individuals for signatures:</p> <ul> <li>[~person1_jira_alias]</li> <li>[~person2_jira_alias]</li> <li>[~person3_jira_alias]</li> </ul> <p>Reference: DocuSign_root_URL/base_URL_for_this_change_control</p> Source code in <code>jira_python_utils/jira_add_change_control_comment.py</code> <pre><code>@click.command()\n@click.option('--change_control_id', help='The change control identifier')\n@click.option('--credential_file', help=f\"The credential file containing username and password - default is '{DEFAULT_CREDENTIAL_FILE}'\")\n@click.option('--config_file', help=f\"The config ini file - default is '{DEFAULT_CONFIG_FILE}'\")\n@click.option('--compliance123_base_url', help='The 123Compliance URL base for change control')\n@click.option('--docusign_base_url', help='The DocuSign URL base for the change control')\n@click.option('--issue', help='The JIRA issue identifier e.g.: JP-478')\n@click.option('--interactive', is_flag=True, help='Run in interactive mode')\ndef main(change_control_id: str, credential_file: Optional[str], config_file: Optional[str], compliance123_base_url: str, docusign_base_url: str, issue: str, interactive: Optional[bool]):\n    \"\"\"Add change control content to a Jira ticket.\n\n    Args:\n        change_control_id (str): The change control identifier.\n        credential_file (Optional[str]): The credential file containing username and password.\n        config_file (Optional[str]): The config ini file.\n        compliance123_base_url (str): The 123Compliance URL base for change control.\n        docusign_base_url (str): The DocuSign URL base for the change control.\n        issue (str): The JIRA issue identifier e.g.: JP-478.\n        interactive (Optional[bool]): Run in interactive mode.\n\n    This will insert a comment in the specified JIRA issue like this:\n    Change control [CR-01958|123Compliance_root_URL/base_URL_for_this_change_control/]\n    has been prepared in 123Compliance.\n\n    Change control has been prepared in DocuSign and sent to the following individuals for signatures:\n\n    * [~person1_jira_alias]\n    * [~person2_jira_alias]\n    * [~person3_jira_alias]\n\n    Reference:\n    DocuSign_root_URL/base_URL_for_this_change_control\n    \"\"\"\n\n    rest_url_file = DEFAULT_URL_FILE\n    check_infile_status(rest_url_file)\n\n    docusign_root_url = None\n    compliance123_root_url = None\n    signers_list = []\n\n    if config_file is None:\n        config_file = DEFAULT_CONFIG_FILE\n        console.print(f\"[bold yellow]--config_file was not specified and therefore was set to '{config_file}'[/]\")\n\n    check_infile_status(config_file)\n\n    if credential_file is None:\n        credential_file = DEFAULT_CREDENTIAL_FILE\n        console.print(\"[bold yellow]--credential_file was not specified and therefore was set to '{credential_file}'[/]\")\n\n    check_infile_status(credential_file)\n\n    if interactive is None:\n        interactive = DEFAULT_INTERACTIVE_MODE\n        console.print(\"[bold yellow]--interactive was not specified and therefore was set to '{interactive}'[/]\")\n\n    error_ctr = 0\n\n    if issue is None:\n        if not interactive:\n            error_console.print(\"--issue was not specified\")\n            error_ctr += 1\n\n    if change_control_id is None:\n        if not interactive:\n            error_console.print(\"--change_control_id was not specified\")\n            error_ctr += 1\n\n    if compliance123_base_url is None:\n        if not interactive:\n            error_console.print(\"--compliance123_base_url was not specified\")\n            error_ctr += 1\n\n    if docusign_base_url is None:\n        if not interactive:\n            error_console.print(\"--docusign_base_url was not specified\")\n            error_ctr += 1\n\n    if error_ctr &gt; 0:\n        error_console.print(\"Required command-line parameters were not specified\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n\n    with open(config_file, 'r') as json_file:\n        text = json_file.read()\n        json_data = json.loads(text)\n\n        for key in json_data:\n            val = json_data[key]\n            if key == '123compliance_root_url':\n                compliance123_root_url = val\n            elif key == 'docusign_root_url':\n                docusign_root_url = val\n            elif key == 'signers_list':\n                signers_list = val\n\n    if change_control_id is None:\n        change_control_id = input(\"What is the change control ID? \")\n        if change_control_id is None or change_control_id == '':\n            error_console.print(\"Invalid value\")\n            sys.exit(1)\n\n    if compliance123_base_url is None:\n        compliance123_base_url = input(\"What is the 123Compliance base URL? \")\n        if compliance123_base_url is None or compliance123_base_url == '':\n            error_console.print(\"Invalid value\")\n            sys.exit(1)\n\n    if docusign_base_url is None:\n        docusign_base_url = input(\"What is the DocuSign base URL? \")\n        if docusign_base_url is None or docusign_base_url == '':\n            error_console.print(\"Invalid value\")\n            sys.exit(1)\n\n    if compliance123_base_url.startswith('http'):\n        compliance123_full_url = compliance123_base_url\n    else:\n        compliance123_full_url = compliance123_root_url + '/' + compliance123_base_url\n\n    if docusign_base_url.startswith('http'):\n        docusign_full_url = docusign_base_url\n    else:\n        docusign_full_url = docusign_root_url + '/' + docusign_base_url\n\n    comment = f\"Change control [{change_control_id}|{compliance123_full_url}] has been prepared in 123Compliance.\\n\\n\"\n    comment += \"The change control has been prepared in DocuSign and sent to the following individuals for signatures:\\n\"\n    for signer in signers_list:\n        comment += f\"* [~{signer}]\\n\"\n    comment += f\"\\nReference:\\n{docusign_full_url}\"\n\n    auth_jira = get_auth(credential_file, get_jira_url(rest_url_file))\n\n    console.print(f\"Will attempt to add the following to issue '{issue}':\\n\\n{comment}\")\n\n    auth_jira.add_comment(issue, comment)\n\n    console.print(\"\\n[bold green]Done[/]\")\n</code></pre>"},{"location":"jira_add_comment/","title":"Jira Add Comment module","text":"<p>Add a comment to the Jira issue.</p>"},{"location":"jira_add_comment/#jira_python_utils.jira_add_comment.main","title":"<code>main(credential_file, comment, comment_file, issue)</code>","text":"<p>Add a comment to the Jira issue.</p> <p>Parameters:</p> Name Type Description Default <code>credential_file</code> <code>str</code> <p>credential file containing username and password - default is '~/.jira/credentials.txt'</p> required <code>comment</code> <code>str</code> <p>text to be added as a comment to the specified issue</p> required <code>comment_file</code> <code>str</code> <p>file containing the text to be added as a comment to the specified issue</p> required <code>issue</code> <code>str</code> <p>the issue id</p> required Source code in <code>jira_python_utils/jira_add_comment.py</code> <pre><code>@click.command()\n@click.option('--credential_file', help=f\"credential file containing username and password - default is '{DEFAULT_CREDENTIAL_FILE}'\")\n@click.option('--comment', help='text to be added as a comment to the specified issue')\n@click.option('--comment_file', help='file containing the text to be added as a comment to the specified issue')\n@click.argument('issue')\ndef main(credential_file: str, comment: str, comment_file: str, issue: str):\n    \"\"\"Add a comment to the Jira issue.\n\n    Args:\n        credential_file (str): credential file containing username and password - default is '~/.jira/credentials.txt'\n        comment (str): text to be added as a comment to the specified issue\n        comment_file (str): file containing the text to be added as a comment to the specified issue\n        issue (str): the issue id\n    \"\"\"\n\n    error_ctr = 0\n\n    if issue is None:\n        error_console.print(\"issue was not specified\")\n        error_ctr += 1\n\n    if comment is None and comment_file is None:\n        error_console.print(\"--comment and --comment_file were not specified\")\n        error_ctr += 1\n\n    if comment == '':\n        error_console.print(\"You must provide some text for the comment\")\n        error_ctr += 1\n\n    if error_ctr &gt; 0:\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    url = get_jira_url(DEFAULT_URL_FILE)\n\n    if credential_file is None:\n        credential_file = DEFAULT_CREDENTIAL_FILE\n\n    check_infile_status(credential_file)\n\n    if comment_file is not None:\n        check_infile_status(comment_file)\n        with open(comment_file, 'r') as cf:\n            comment = cf.read()\n\n    auth_jira = get_auth(credential_file, url)\n\n    if auth_jira is None:\n        error_console.print(\"Could not instantiate JIRA for url '{}'\".format(url))\n        sys.exit(1)\n\n    console.print(f\"Will attempt to add comment '{comment}' to issue '{issue}'\")\n\n    auth_jira.add_comment(issue, comment)\n\n    console.print(f\"Added comment '{comment}' to issue '{issue}'\")\n</code></pre>"},{"location":"jira_add_component/","title":"Jira Add Component module","text":"<p>Add a component to a JIRA issue.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>Raised if there is a problem emitted by the API.</p>"},{"location":"jira_add_component/#jira_python_utils.jira_add_component.main","title":"<code>main(credential_file, issue, comp)</code>","text":"<p>Add a component to a JIRA issue.</p> <p>Parameters:</p> Name Type Description Default <code>credential_file</code> <code>str</code> <p>The credential file containing username and password.</p> required <code>issue</code> <code>str</code> <p>The Jira issue identifier e.g.: JP-478.</p> required <code>comp</code> <code>str</code> <p>The Jira component.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>Raised if there is a problem emitted by the API.</p> Source code in <code>jira_python_utils/jira_add_component.py</code> <pre><code>@click.command()\n@click.option('--credential_file', help='credential file containing username and password')\n@click.option('--issue', help='The JIRA issue')\n@click.option('--comp', help='The JIRA component')\ndef main(credential_file, issue, comp):\n    \"\"\"Add a component to a JIRA issue.\n\n    Args:\n        credential_file (str): The credential file containing username and password.\n        issue (str): The Jira issue identifier e.g.: JP-478.\n        comp (str): The Jira component.\n\n    Raises:\n        Exception: Raised if there is a problem emitted by the API.\n    \"\"\"\n\n    rest_url_file = DEFAULT_URL_FILE\n    check_infile_status(rest_url_file)\n\n    if credential_file is None:\n        credential_file = DEFAULT_CREDENTIAL_FILE\n    check_infile_status(credential_file)\n\n    error_ctr = 0\n\n    if issue is None:\n        error_console.print(\"--issue was not specified\")\n        error_ctr += 1\n\n    if comp is None:\n        error_console.print(\"--comp was not specified\")\n        error_ctr += 1\n\n    if error_ctr &gt; 0:\n        error_console.print(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    auth_jira = get_auth(credential_file, get_jira_url(rest_url_file))\n\n    if auth_jira is None:\n        error_console.print(\"Could not instantiate JIRA auth\")\n        sys.exit(1)\n\n    console.print(f\"Will attempt to add component '{comp}' to JIRA issue '{issue}'\")\n\n    try:\n\n        i = auth_jira.issue(issue)\n        if i is None:\n            raise Exception(f\"Could not retrieve issue object for issue '{issue}'\")\n\n        # comp = 'report automation'\n        i.fields.components.append({'name': comp})\n        i.update(fields={'components': i.fields.components})\n\n    except Error as e:\n        error_console.print(f\"Encountered some exception while attempting to add component '{comp}' to JIRA issue '{issue}': {e}\")\n        sys.exit(1)\n    else:\n        console.print(\"Added component '{comp}' to JIRA issue '{issue}'\")\n</code></pre>"},{"location":"jira_add_label/","title":"Jira Add Label module","text":""},{"location":"jira_assign_issue/","title":"Jira Assign Issue module","text":"<p>Assign a JIRA issue to a user.</p>"},{"location":"jira_assign_issue/#jira_python_utils.jira_assign_issue.main","title":"<code>main(credential_file, assignee, issue)</code>","text":"<p>Assign a JIRA issue to a user.</p> <p>Parameters:</p> Name Type Description Default <code>credential_file</code> <code>str</code> <p>The credential file containing username and password.</p> required <code>assignee</code> <code>str</code> <p>The Jira username to be assigned to the issue.</p> required <code>issue</code> <code>str</code> <p>The Jira issue identifier e.g.: JP-478.</p> required Source code in <code>jira_python_utils/jira_assign_issue.py</code> <pre><code>@click.command()\n@click.option('--credential_file', help=f\"credential file containing username and password - default is '{DEFAULT_CREDENTIAL_FILE}\")\n@click.option('--assignee', help='username to be assigned to issue (default will be username specified in credential file)')\n@click.argument('issue')\ndef main(credential_file: str, assignee: str, issue: str):\n    \"\"\"Assign a JIRA issue to a user.\n\n    Args:\n        credential_file (str): The credential file containing username and password.\n        assignee (str): The Jira username to be assigned to the issue.\n        issue (str): The Jira issue identifier e.g.: JP-478.\n    \"\"\"\n    if issue is None:\n        error_console.print(\"issue was not specified\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    rest_url_file = DEFAULT_URL_FILE\n    check_infile_status(rest_url_file)\n\n    if credential_file is None:\n        credential_file = DEFAULT_CREDENTIAL_FILE\n\n    check_infile_status(credential_file)\n\n    if assignee is None:\n        assignee = get_username(credential_file)\n\n    auth_jira = get_auth(credential_file, get_jira_url(rest_url_file))\n\n    if auth_jira is None:\n        error_console.print(\"Could not instantiate JIRA auth for url\")\n        sys.exit(1)\n\n    console.print(f\"Will attempt to assign issue '{issue}' to username '{assignee}'\")\n\n    auth_jira.assign_issue(issue, assignee)\n\n    console.print(f\"Assigned issue '{issue}' to username '{assignee}'\")\n</code></pre>"},{"location":"jira_convert_task_session_script_to_readme/","title":"Jira Convert Task Session Script To Readme module","text":"<p>Convert a script session file to a README file.</p>"},{"location":"jira_convert_task_session_script_to_readme/#jira_python_utils.jira_convert_task_session_script_to_readme.convert_file","title":"<code>convert_file(infile, outfile, jira_id, verbose=DEFAULT_VERBOSE, command_prompt=DEFAULT_COMMAND_PROMPT, command_start=DEFAULT_COMMAND_START)</code>","text":"<p>Convert the input file to a README file.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>The input file absolute path.</p> required <code>outfile</code> <code>str</code> <p>The output file absolute path.</p> required <code>jira_id</code> <code>str</code> <p>The Jira issue id.</p> required <code>verbose</code> <code>bool</code> <p>Will print more info to STDOUT. Defaults to DEFAULT_VERBOSE.</p> <code>DEFAULT_VERBOSE</code> <code>command_prompt</code> <code>str</code> <p>The command prompt string. Defaults to DEFAULT_COMMAND_PROMPT.</p> <code>DEFAULT_COMMAND_PROMPT</code> <code>command_start</code> <code>str</code> <p>The command start string. Defaults to DEFAULT_COMMAND_START.</p> <code>DEFAULT_COMMAND_START</code> Source code in <code>jira_python_utils/jira_convert_task_session_script_to_readme.py</code> <pre><code>def convert_file(infile: str, outfile: str, jira_id: str, verbose: bool = DEFAULT_VERBOSE, command_prompt: str = DEFAULT_COMMAND_PROMPT, command_start: str = DEFAULT_COMMAND_START) -&gt; None:\n    \"\"\"Convert the input file to a README file.\n\n    Args:\n        infile (str): The input file absolute path.\n        outfile (str): The output file absolute path.\n        jira_id (str): The Jira issue id.\n        verbose (bool, optional): Will print more info to STDOUT. Defaults to DEFAULT_VERBOSE.\n        command_prompt (str, optional): The command prompt string. Defaults to DEFAULT_COMMAND_PROMPT.\n        command_start (str, optional): The command start string. Defaults to DEFAULT_COMMAND_START.\n    \"\"\"\n    content = get_file_content(infile, command_prompt, command_start)\n\n    with open(outfile, 'w') as of:\n        for i, command_set in enumerate(content, start=1):\n            command = command_set[0]\n            command_output = command_set[1]\n            print(f\"Here is command '{i}': {command}\")\n            print(f\"{command_output}\\n\")\n            if not include():\n                continue\n\n            desc = get_description()\n            of.write(f\"## Step {i} {desc}\\n\")\n            of.write('\"\"\"shell\\n')\n            of.write(f\"{command_output}\")\n            of.write('\"\"\"\\n')\n\n    logging.info(f\"Wrote file '{outfile}'\")\n    if verbose:\n        print(f\"Wrote file '{outfile}'\")\n</code></pre>"},{"location":"jira_convert_task_session_script_to_readme/#jira_python_utils.jira_convert_task_session_script_to_readme.create_readme_file","title":"<code>create_readme_file(jira_dir, jira_id, url, verbose=DEFAULT_VERBOSE)</code>","text":"<p>Create the README file.</p> <p>Parameters:</p> Name Type Description Default <code>jira_dir</code> <code>str</code> <p>The Jira issue directory.</p> required <code>jira_id</code> <code>str</code> <p>The Jira issue id.</p> required <code>url</code> <code>str</code> <p>The Jira issue URL.</p> required <code>verbose</code> <code>bool</code> <p>If true print more info to STDOUT. Defaults to DEFAULT_VERBOSE.</p> <code>DEFAULT_VERBOSE</code> Source code in <code>jira_python_utils/jira_convert_task_session_script_to_readme.py</code> <pre><code>def create_readme_file(jira_dir: str, jira_id: str, url: str, verbose: bool = DEFAULT_VERBOSE) -&gt; None:\n    \"\"\"Create the README file.\n\n    Args:\n        jira_dir (str): The Jira issue directory.\n        jira_id (str): The Jira issue id.\n        url (str): The Jira issue URL.\n        verbose (bool, optional): If true print more info to STDOUT. Defaults to DEFAULT_VERBOSE.\n    \"\"\"\n    outfile = os.path.join(jira_dir, \"README.md\")\n    if not os.path.exists(outfile):\n        with open(outfile, 'w') as of:\n            of.write(f\"# Jira ID: {jira_id}\\n\")\n            of.write(f\"URL: {url}\\n&lt;br&gt;\\n\")\n            of.write(f\"Date: {str(datetime.today().strftime('%Y-%m-%d-%H:%M:%S'))}\\n&lt;br&gt;\\n\")\n\n        logging.info(f\"Wrote file '{outfile}'\")\n        if verbose:\n            print(f\"Wrote file '{outfile}'\")\n    print(f\"README file is ready: '{outfile}'\")\n</code></pre>"},{"location":"jira_convert_task_session_script_to_readme/#jira_python_utils.jira_convert_task_session_script_to_readme.create_symlink_directory","title":"<code>create_symlink_directory(jira_dir, verbose=DEFAULT_VERBOSE)</code>","text":"<p>Create the symlink to the Jira issue directory.</p> <p>Parameters:</p> Name Type Description Default <code>jira_dir</code> <code>str</code> <p>The Jira issue directory.</p> required <code>verbose</code> <code>bool</code> <p>If True print info to STDOUT. Defaults to DEFAULT_VERBOSE.</p> <code>DEFAULT_VERBOSE</code> Source code in <code>jira_python_utils/jira_convert_task_session_script_to_readme.py</code> <pre><code>def create_symlink_directory(jira_dir: str, verbose: bool = DEFAULT_VERBOSE) -&gt; None:\n    \"\"\"Create the symlink to the Jira issue directory.\n\n    Args:\n        jira_dir (str): The Jira issue directory.\n        verbose (bool, optional): If True print info to STDOUT. Defaults to DEFAULT_VERBOSE.\n    \"\"\"\n\n    target_dir = os.path.join(os.getenv(\"HOME\"), \"JIRA\", os.path.basename(jira_dir))\n\n    # create the symlink\n    os.symlink(jira_dir, target_dir)\n\n    # verify the symlink was created successfully\n    if os.path.islink(target_dir):\n        logging.info(f\"Symlink created: {target_dir} -&gt; {jira_dir}\")\n        if verbose:\n            print(f\"Symlink created: {target_dir} -&gt; {jira_dir}\")\n    else:\n        print_red(f\"Could not create symlink '{target_dir}'\")\n        sys.exit(1)\n</code></pre>"},{"location":"jira_convert_task_session_script_to_readme/#jira_python_utils.jira_convert_task_session_script_to_readme.echo_script","title":"<code>echo_script(jira_id, jira_dir)</code>","text":"<p>Start the script command.</p> <p>Parameters:</p> Name Type Description Default <code>jira_id</code> <code>str</code> <p>The Jira issue id.</p> required <code>jira_dir</code> <code>str</code> <p>The directory where the script file will be written.</p> required Source code in <code>jira_python_utils/jira_convert_task_session_script_to_readme.py</code> <pre><code>def echo_script(jira_id: str, jira_dir: str) -&gt; None:\n    \"\"\"Start the script command.\n\n    Args:\n        jira_id (str): The Jira issue id.\n        jira_dir (str): The directory where the script file will be written.\n    \"\"\"\n    print(\"Execute this when ready to start:\")\n    outfile = os.path.join(jira_dir, f\"script_{DEFAULT_TIMESTAMP}.txt\")\n    print_yellow(f\"script -q {outfile}\")\n    print_yellow(f\"echo 'Starting task {jira_id}'\")\n</code></pre>"},{"location":"jira_convert_task_session_script_to_readme/#jira_python_utils.jira_convert_task_session_script_to_readme.get_description","title":"<code>get_description()</code>","text":"<p>Prompt the user for a description of the command.</p> Source code in <code>jira_python_utils/jira_convert_task_session_script_to_readme.py</code> <pre><code>def get_description() -&gt; str:\n    \"\"\"Prompt the user for a description of the command.\"\"\"\n    desc = None\n    while desc is None or desc == '':\n        desc = input(\"What is the description? \")\n        desc = desc.strip()\n    return desc\n</code></pre>"},{"location":"jira_convert_task_session_script_to_readme/#jira_python_utils.jira_convert_task_session_script_to_readme.get_file_content","title":"<code>get_file_content(infile, command_prompt=DEFAULT_COMMAND_PROMPT, command_start=DEFAULT_COMMAND_START)</code>","text":"<p>Read the file and return the content as a list of lists.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>The input file absolute path.</p> required <code>command_prompt</code> <code>str</code> <p>The command prompt string. Defaults to DEFAULT_COMMAND_PROMPT.</p> <code>DEFAULT_COMMAND_PROMPT</code> <code>command_start</code> <code>str</code> <p>The command start string. Defaults to DEFAULT_COMMAND_START.</p> <code>DEFAULT_COMMAND_START</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: The content of the file as a list of lists.</p> Source code in <code>jira_python_utils/jira_convert_task_session_script_to_readme.py</code> <pre><code>def get_file_content(infile: str, command_prompt: str = DEFAULT_COMMAND_PROMPT, command_start: str = DEFAULT_COMMAND_START) -&gt; List[str]:\n    \"\"\"Read the file and return the content as a list of lists.\n\n    Args:\n        infile (str): The input file absolute path.\n        command_prompt (str, optional): The command prompt string. Defaults to DEFAULT_COMMAND_PROMPT.\n        command_start (str, optional): The command start string. Defaults to DEFAULT_COMMAND_START.\n\n    Returns:\n        List[str]: The content of the file as a list of lists.\n    \"\"\"\n    command_prompt = command_prompt.lstrip()\n    command_start = command_start.lstrip()\n\n    logging.info(f\"{command_prompt=} {command_start=}\")\n\n    logging.info(f\"Will read file '{infile}'\")\n    line_ctr = 0\n    content = []\n    current_command = None\n    command_ctr = 0\n    current_command_output = []\n\n    with open(infile, 'r') as f:\n        for line in f:\n            line_ctr += 1\n            print(f\"{line}\")\n            if line.startswith(command_prompt):\n                command_ctr += 1\n                content.append([current_command, current_command_output])\n                current_command = line.split(command_start)[1]\n                current_command_output = []\n\n        # Store the last line in the file\n        content.append([current_command, current_command_output])\n\n    if line_ctr &gt; 0:\n        logging.info(f\"Read '{line_ctr}' lines from file '{infile}'\")\n        logging.info(f\"Found '{command_ctr}' commands in file '{infile}'\")\n    else:\n        logging.info(f\"Did not read any lines from file '{infile}'\")\n\n    return content\n</code></pre>"},{"location":"jira_convert_task_session_script_to_readme/#jira_python_utils.jira_convert_task_session_script_to_readme.include","title":"<code>include()</code>","text":"<p>Prompt the user to include the command in the README.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the user wants to include the command in the README, False otherwise.</p> Source code in <code>jira_python_utils/jira_convert_task_session_script_to_readme.py</code> <pre><code>def include() -&gt; bool:\n    \"\"\"Prompt the user to include the command in the README.\n\n    Returns:\n        bool: True if the user wants to include the command in the README, False otherwise.\n    \"\"\"\n    ans = input(\"Include this command in the README? [Y/n] \")\n    ans = ans.strip()\n    if ans == '' or ans.lower() == 'y':\n        return True\n    return False\n</code></pre>"},{"location":"jira_convert_task_session_script_to_readme/#jira_python_utils.jira_convert_task_session_script_to_readme.initialize_jira_directory","title":"<code>initialize_jira_directory(jira_id, verbose=DEFAULT_VERBOSE)</code>","text":"<p>Create the Jira id directory and return the that path.</p> <p>Parameters:</p> Name Type Description Default <code>jira_id</code> <code>str</code> <p>The Jira issue id</p> required <p>Returns:</p> Name Type Description <code>dir</code> <code>str</code> <p>The absolute path to the Jira issue directory created</p> Source code in <code>jira_python_utils/jira_convert_task_session_script_to_readme.py</code> <pre><code>def initialize_jira_directory(jira_id: str, verbose: bool = DEFAULT_VERBOSE) -&gt; str:\n    \"\"\"Create the Jira id directory and return the that path.\n\n    Args:\n        jira_id (str): The Jira issue id\n\n    Returns:\n        dir (str): The absolute path to the Jira issue directory created\n    \"\"\"\n    jira_dir = os.path.join(os.getenv(\"HOME\"), \"vboxshare\", \"JIRA\", jira_id)\n    if not os.path.exists(jira_dir):\n        pathlib.Path(jira_dir).mkdir(parents=True, exist_ok=True)\n\n        logging.info(f\"Created directory '{jira_dir}'\")\n        if verbose:\n            print(f\"Created directory '{jira_dir}'\")\n    else:\n        logging.info(f\"'{jira_dir}' already exists\")\n        if verbose:\n            print(f\"'{jira_dir}' already exists\")\n\n    return jira_dir\n</code></pre>"},{"location":"jira_convert_task_session_script_to_readme/#jira_python_utils.jira_convert_task_session_script_to_readme.main","title":"<code>main(config_file, infile, jira_id, logfile, outdir, outfile, verbose)</code>","text":"<p>Convert a script session file to a README file.</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>str</code> <p>The configuration file.</p> required <code>infile</code> <code>str</code> <p>The input script session file.</p> required <code>jira_id</code> <code>str</code> <p>The Jira ticket identifier.</p> required <code>logfile</code> <code>str</code> <p>The log file.</p> required <code>outdir</code> <code>str</code> <p>The output directory.</p> required <code>outfile</code> <code>str</code> <p>The output README file.</p> required <code>verbose</code> <code>bool</code> <p>The verbose flag.</p> required Source code in <code>jira_python_utils/jira_convert_task_session_script_to_readme.py</code> <pre><code>@click.command()\n@click.option('--config_file', type=click.Path(exists=True), help=f\"The configuration file - default is '{DEFAULT_CONFIG_FILE}'\")\n@click.option('--infile', help='The input script session file')\n@click.option('--jira_id', help='The Jira ticket identifier')\n@click.option('--logfile', help=\"The log file\")\n@click.option('--outdir', help=f\"The default is the current working directory - default is '{DEFAULT_OUTDIR}'\")\n@click.option('--outfile', help=\"The output README file\")\n@click.option('--verbose', is_flag=True, help=f\"Will print more info to STDOUT - default is '{DEFAULT_VERBOSE}'\")\ndef main(config_file: str, infile: str, jira_id: str, logfile: str, outdir: str, outfile: str, verbose: bool):\n    \"\"\"Convert a script session file to a README file.\n\n    Args:\n        config_file (str): The configuration file.\n        infile (str): The input script session file.\n        jira_id (str): The Jira ticket identifier.\n        logfile (str): The log file.\n        outdir (str): The output directory.\n        outfile (str): The output README file.\n        verbose (bool): The verbose flag.\n    \"\"\"\n\n    error_ctr = 0\n\n    if infile is None:\n        print_red(\"--infile was not specified\")\n        error_ctr += 1\n\n    if jira_id is None:\n        print_red(\"--jira_id was not specified\")\n        error_ctr += 1\n\n    if error_ctr &gt; 0:\n        print(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    check_infile_status(infile)\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n    if outfile is None:\n        outfile = os.path.join(os.getenv(\"HOME\"), \"JIRA\", \"README.md\")\n        print_yellow(f\"--outfile was not specified and therefore was set to '{outfile}'\")\n\n    if verbose is None:\n        verbose = DEFAULT_VERBOSE\n        print_yellow(f\"--verbose was not specified and therefore was set to '{verbose}'\")\n\n    logging.basicConfig(\n        filename=logfile,\n        format=LOGGING_FORMAT,\n        level=LOG_LEVEL\n    )\n\n    convert_file(infile, outfile, jira_id, verbose)\n</code></pre>"},{"location":"jira_create_issue/","title":"Jira Create Issue module","text":"<p>Create a JIRA issue.</p>"},{"location":"jira_create_issue/#jira_python_utils.jira_create_issue.main","title":"<code>main(credential_file, project, summary, desc, issue_type, assignee)</code>","text":"<p>Create a JIRA issue.</p> <p>Parameters:</p> Name Type Description Default <code>credential_file</code> <code>str</code> <p>The credential file containing username and password.</p> required <code>project</code> <code>str</code> <p>The JIRA project key.</p> required <code>summary</code> <code>str</code> <p>The summary i.e.: the title of the issue.</p> required <code>desc</code> <code>str</code> <p>The description of the issue.</p> required <code>issue_type</code> <code>str</code> <p>The issue type e.g.: bug.</p> required <code>assignee</code> <code>str</code> <p>The assignee.</p> required Source code in <code>jira_python_utils/jira_create_issue.py</code> <pre><code>@click.command()\n@click.option('--credential_file', help='credential file containing username and password')\n@click.option('--project', help='The JIRA project key')\n@click.option('--summary', help='The summary i.e.: the title of the issue')\n@click.option('--desc', help='The description of the issue')\n@click.option('--issue_type', help='The issue type e.g.: bug')\n@click.option('--assignee', help='The assignee')\ndef main(credential_file: str, project: str, summary: str, desc: str, issue_type: str, assignee: str):\n    \"\"\"Create a JIRA issue.\n\n    Args:\n        credential_file (str): The credential file containing username and password.\n        project (str): The JIRA project key.\n        summary (str): The summary i.e.: the title of the issue.\n        desc (str): The description of the issue.\n        issue_type (str): The issue type e.g.: bug.\n        assignee (str): The assignee.\n    \"\"\"\n\n    rest_url_file = DEFAULT_URL_FILE\n    check_infile_status(rest_url_file)\n\n    if credential_file is None:\n        credential_file = DEFAULT_CREDENTIAL_FILE\n\n    check_infile_status(credential_file)\n\n    error_ctr = 0\n\n    if project is None:\n        error_console.print(\"--project was not specified\")\n        error_ctr += 1\n\n    if summary is None:\n        error_console.print(\"--summary was not specified\")\n        error_ctr += 1\n\n    if issue_type is None:\n        error_console.print(\"--issue_type was not specified\")\n        error_ctr += 1\n\n    if error_ctr &gt; 0:\n        error_console.print(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if desc is None:\n        desc = summary\n        console.print(f\"[bold yellow]--desc was not specified and therefore was set to '{desc}'[/]\")\n\n    if assignee is None:\n        assignee = get_username(credential_file)\n        console.print(f\"[bold yellow]--assignee was not specified and therefore was set to '{assignee}'[/]\")\n\n\n    if issue_type.lower() == 'task':\n        issue_type = 'Task'\n    elif issue_type.lower() == 'bug':\n        issue_type = 'Bug'\n    elif issue_type.lower() == 'story':\n        issue_type = 'Story'\n    else:\n        error_console.print(f\"issue type '{issue_type}' is not supported\")\n        sys.exit(1)\n\n    auth_jira = get_auth(credential_file, get_jira_url(rest_url_file))\n\n    console.print(f\"Will attempt to create a JIRA issue for project '{project}' summary '{summary}' type '{issue_type}' assignee '{assignee}' description '{desc}'\")\n\n    try:\n        new_issue = auth_jira.create_issue(\n            project={'key':project},\n            summary=summary,\n            issuetype={'name':issue_type},\n            description=desc,\n            assignee={'name':assignee}\n        )\n\n    except Error as e:\n        error_console.print(f\"Encountered some exception while attempting to create a new JIRA issue: '{e}'\")\n        sys.exit(1)\n    else:\n        console.print(\"Created new issue\")\n        console.print(new_issue)\n</code></pre>"},{"location":"jira_create_release_software_issues/","title":"Jira Create Release Software Issues module","text":"<p>Create a set of JIRA issues for a software release.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>Raise if there is a problem emitted by the API.</p>"},{"location":"jira_create_release_software_issues/#jira_python_utils.jira_create_release_software_issues.create_issue","title":"<code>create_issue(summary, description, labels=None)</code>","text":"<p>Create a new JIRA issue.</p> <p>Parameters:</p> Name Type Description Default <code>summary</code> <code>str</code> <p>The JIRA issue summary.</p> required <code>description</code> <code>str</code> <p>The new JIRA issue description.</p> required <code>labels</code> <code>list</code> <p>The labels that should be applied to the new JIRA issue.</p> <code>None</code> Source code in <code>jira_python_utils/jira_create_release_software_issues.py</code> <pre><code>def create_issue(summary: str, description: str, labels: List[str] = None) -&gt; None:\n    \"\"\"Create a new JIRA issue.\n\n    Args:\n        summary (str): The JIRA issue summary.\n        description (str): The new JIRA issue description.\n        labels (list): The labels that should be applied to the new JIRA issue.\n    \"\"\"\n    if g_parent_issue_id is not None:\n        description += \"\\nReference: \" + g_parent_issue_id\n\n    print(f\"Will attempt to create a JIRA issue for project '{g_project}' summary '{summary}' type '{g_issue_type}' assignee '{g_assignee}' and description:\\n{description}\")\n\n    try:\n        new_issue = g_auth_jira.create_issue(\n            project=g_project,\n            summary=summary,\n            issuetype={'name':g_issue_type},\n            description=description,\n            assignee={'name':g_assignee}\n            )\n\n    except Error as e:\n        print(f\"Encountered some exception while attempting to create a new JIRA issue: '{e}'\")\n        sys.exit(1)\n\n    new_issue_id = new_issue.key\n    new_issue_url = g_url + '/browse/' + new_issue_id\n    print(f\"\\nCreated new issue with ID '{new_issue_id}'\\n{new_issue_url}\")\n\n    if DEFAULT_LINK_ISSUES:\n\n        if g_parent_issue_id is not None:\n\n            print(f\"Will attempt to link parent issue '{g_parent_issue_id}' to this issue '{new_issue_id}' with link type '{g_link_type}'\")\n\n            try:\n                g_auth_jira.create_issue_link(\n                    type=g_link_type,\n                    inwardIssue=new_issue_id,\n                    outwardIssue=g_parent_issue_id,\n                    comment={\n                        \"body\": f\"Linking {new_issue_id} to {g_parent_issue_id}\"\n                    }\n                )\n\n            except Error as e:\n                print(f\"Encountered some exception while attempting to link this issue '{new_issue_id}' to parent issue '{g_parent_issue_id}' with link type '{g_link_type}': {e}\")\n                sys.exit(1)\n            else:\n                print(f\"Linked this issue '{new_issue_id}' to parent issue '{g_parent_issue_id}' with link type '{g_link_type}'\")\n\n    if g_component is not None:\n\n        try:\n\n            i = g_auth_jira.issue(new_issue_id)\n            if i is None:\n                raise Exception(f\"Could not retrieve issue object for issue '{new_issue_id}'\")\n\n            i.fields.components.append({'name': g_component})\n            i.update(fields={'components': i.fields.components})\n\n        except Error as e:\n            print(f\"Encountered some exception while attempting to add component '{g_component}' to JIRA issue '{new_issue_id}': {e}\")\n            sys.exit(1)\n        else:\n            print(f\"Added component '{g_component}' to JIRA issue '{new_issue_id}'\")\n\n    if labels is not None:\n\n        label_ctr = 0\n        label_str = \",\".join(labels)\n\n        for label in labels:\n            label_ctr += 1\n            label = label.strip()\n            label = label.replace(' ', '-')\n            new_issue.fields.labels.append(label)\n\n        try:\n            new_issue.update(fields={'labels': new_issue.fields.labels})\n        except Error as e:\n            if label_ctr == 1:\n                print(f\"Encountered some exception while attempting to add label '{label_str}' to JIRA issue '{new_issue_id}': {e}\")\n            else:\n                print(f\"Encountered some exception while attempting to add labels '{label_str}' to JIRA issue '{new_issue_id}': {e}\")\n\n            sys.exit(1)\n        else:\n            if label_ctr == 1:\n                print(f\"Added label '{label_str}' to JIRA issue '{new_issue_id}'\")\n            else:\n                print(f\"Added labels '{label_str}' to JIRA issue '{new_issue_id}'\")\n\n    global g_issues\n    g_issues.append(new_issue_id)\n\n    return new_issue_id\n</code></pre>"},{"location":"jira_create_release_software_issues/#jira_python_utils.jira_create_release_software_issues.create_issue_collect_release_documents","title":"<code>create_issue_collect_release_documents()</code>","text":"<p>Create a new JIRA issue for 'collect release documents'.</p> Source code in <code>jira_python_utils/jira_create_release_software_issues.py</code> <pre><code>def create_issue_collect_release_documents():\n    \"\"\"Create a new JIRA issue for 'collect release documents'.\"\"\"\n    summary = f\"collect release documents for {g_codebase} {g_version} on {g_server}\"\n    description = f\"Need to prepare the binder coverpage and collect all release documents (change control and validation documents) for the software release.\\ncode-base: {g_codebase}\\nversion: {g_version}\\nserver(s): {g_server}\"\n    labels = ['collect-release-documents', 'install-server:' + g_server, g_codebase + '-' + g_version, g_codebase]\n    return create_issue(summary, description, labels)\n</code></pre>"},{"location":"jira_create_release_software_issues/#jira_python_utils.jira_create_release_software_issues.create_issue_establish_release_candidate","title":"<code>create_issue_establish_release_candidate()</code>","text":"<p>Create a new JIRA issue for the 'establish release candidate'.</p> Source code in <code>jira_python_utils/jira_create_release_software_issues.py</code> <pre><code>def create_issue_establish_release_candidate():\n    \"\"\"Create a new JIRA issue for the 'establish release candidate'.\"\"\"\n    summary = f\"establish next software release candidate for {g_codebase} {g_version}\"\n    description = f\"Need to establish the next software release candidate.\\ncode-base: {g_codebase}\\nversion: {g_version}\"\n    labels = ['establish-release-candidate', g_codebase + '-' + g_version, g_codebase]\n    return create_issue(summary, description, labels)\n</code></pre>"},{"location":"jira_create_release_software_issues/#jira_python_utils.jira_create_release_software_issues.create_issue_execute_validation_checks","title":"<code>create_issue_execute_validation_checks()</code>","text":"<p>Create a new JIRA issue for 'execute validation checks'.</p> Source code in <code>jira_python_utils/jira_create_release_software_issues.py</code> <pre><code>def create_issue_execute_validation_checks():\n    \"\"\"Create a new JIRA issue for 'execute validation checks'.\"\"\"\n    summary = f\"execution validation checks for {g_codebase} {g_version} on {g_server}\"\n    description = f\"Need to execute validation checks for a software release.\\ncode-base: {g_codebase}\\nversion: {g_version}\\nserver(s): {g_server}\"\n    labels = ['execute-validation-checks', 'install-server:' + g_server, g_codebase + '-' + g_version, g_codebase]\n    return create_issue(summary, description, labels)\n</code></pre>"},{"location":"jira_create_release_software_issues/#jira_python_utils.jira_create_release_software_issues.create_issue_install_software","title":"<code>create_issue_install_software()</code>","text":"<p>Create a new JIRA issue for the 'install software'.</p> Source code in <code>jira_python_utils/jira_create_release_software_issues.py</code> <pre><code>def create_issue_install_software():\n    \"\"\"Create a new JIRA issue for the 'install software'.\"\"\"\n    summary = f\"install software release for {g_codebase} {g_version} on {g_server}\"\n    description = f\"Need to install software release.\\ncode-base: {g_codebase}\\nversion: {g_version}\\nserver(s): {g_server}\"\n    labels = ['software-release', 'install-server:' + g_server, g_codebase + '-' + g_version, g_codebase]\n    return create_issue(summary, description, labels)\n</code></pre>"},{"location":"jira_create_release_software_issues/#jira_python_utils.jira_create_release_software_issues.create_issue_prepare_change_control","title":"<code>create_issue_prepare_change_control()</code>","text":"<p>Create a new JIRA issue for 'prepare change control'.</p> Source code in <code>jira_python_utils/jira_create_release_software_issues.py</code> <pre><code>def create_issue_prepare_change_control():\n    \"\"\"Create a new JIRA issue for 'prepare change control'.\"\"\"\n    summary = f\"prepare change control to install {g_codebase} {g_version} on {g_server}\"\n    description = f\"Need to prepare a change control in 123Compliance and DocuSign to install a software release.\\ncode-base: {g_codebase}\\nversion: {g_version}\\nserver(s): {g_server}\"\n    labels = ['prepare-change-control', 'install-server:' + g_server, g_codebase + '-' + g_version, g_codebase]\n    return create_issue(summary, description, labels)\n</code></pre>"},{"location":"jira_create_release_software_issues/#jira_python_utils.jira_create_release_software_issues.create_issue_prepare_validation_docs","title":"<code>create_issue_prepare_validation_docs()</code>","text":"<p>Create a new JIRA issue for 'prepare validation documents'.</p> Source code in <code>jira_python_utils/jira_create_release_software_issues.py</code> <pre><code>def  create_issue_prepare_validation_docs():\n    \"\"\"Create a new JIRA issue for 'prepare validation documents'.\"\"\"\n    summary = f\"prepare validation documents for {g_codebase} {g_version} on {g_server}\"\n    description = f\"Need to prepare validation documents for a software release.\\ncode-base: {g_codebase}\\nversion: {g_version}\\nserver(s): {g_server}\"\n    labels = ['prepare-validation-documents', g_codebase + '-' + g_version, g_codebase]\n    return create_issue(summary, description, labels)\n</code></pre>"},{"location":"jira_create_release_software_issues/#jira_python_utils.jira_create_release_software_issues.create_issue_software_release","title":"<code>create_issue_software_release()</code>","text":"<p>Create a new JIRA issue for the 'software release'.</p> Source code in <code>jira_python_utils/jira_create_release_software_issues.py</code> <pre><code>def create_issue_software_release():\n    \"\"\"Create a new JIRA issue for the 'software release'.\"\"\"\n    summary = f\"software release for {g_codebase} {g_version} on {g_server}\"\n    description = f\"Need to install software release.\\ncode-base: {g_codebase}\\nversion: {g_version}\\nserver(s): {g_server}\"\n    labels = ['software-release', 'install-server:' + g_server, g_codebase + '-' + g_version, g_codebase]\n    return create_issue(summary, description, labels)\n</code></pre>"},{"location":"jira_create_release_software_issues/#jira_python_utils.jira_create_release_software_issues.create_issue_test_cases_software","title":"<code>create_issue_test_cases_software()</code>","text":"<p>Create a new JIRA issue for the 'test cases'.</p> Source code in <code>jira_python_utils/jira_create_release_software_issues.py</code> <pre><code>def create_issue_test_cases_software():\n    \"\"\"Create a new JIRA issue for the 'test cases'.\"\"\"\n    summary = f\"test cases for {g_codebase} {g_version}\"\n    description = f\"Identify and collect test cases.\\ncode-base: {g_codebase}\\nversion: {g_version}\"\n    labels = ['test-cases', g_codebase + '-' + g_version, g_codebase]\n    return create_issue(summary, description, labels)\n</code></pre>"},{"location":"jira_create_release_software_issues/#jira_python_utils.jira_create_release_software_issues.main","title":"<code>main(credential_file, project, codebase, version, server, assignee, component, all)</code>","text":"<p>Create the standard set of JIRA issues.</p> <p>If executed with --all option, will create issues for all of the following:</p> <pre><code>establish release candidate\n\nprepare change control\n\ninstall software\n\nprepare validation documents\n\nexecute validation checks\n\nprepare test cases\n\ncollect release documents\n</code></pre> Source code in <code>jira_python_utils/jira_create_release_software_issues.py</code> <pre><code>@click.command()\n@click.option('--credential_file', help='credential file containing username and password')\n@click.option('--project', help='The JIRA project key')\n@click.option('--codebase', help='The code-base')\n@click.option('--version', help='The version of the code-base')\n@click.option('--server', help='The server the code will be installed on')\n@click.option('--assignee', help='The assignee')\n@click.option('--component', help='The component')\n@click.option('--all', is_flag=True, default=False)\ndef main(credential_file, project, codebase, version, server, assignee, component, all):\n    \"\"\"Create the standard set of JIRA issues.\n\n    If executed with --all option, will create issues for all of the following:\n\n        establish release candidate\n\n        prepare change control\n\n        install software\n\n        prepare validation documents\n\n        execute validation checks\n\n        prepare test cases\n\n        collect release documents\n    \"\"\"\n\n    rest_url_file = DEFAULT_URL_FILE\n    if not os.path.exists(rest_url_file):\n        print(\"JIRA REST URL file '{}' does not exist\".format(rest_url_file))\n        sys.exit(1)\n    else:\n        with open(rest_url_file, 'r') as f:\n            url = f.readline()\n            url = url.strip()\n            print(\"read the REST URL from file '{}'\".format(rest_url_file))\n\n    if credential_file is None:\n        credential_file = DEFAULT_CREDENTIAL_FILE\n\n    if not os.path.exists(credential_file):\n        print(\"JIRA credential file '{}' does not exist\".format(credential_file))\n        sys.exit(1)\n\n    error_ctr = 0\n\n    if codebase is None:\n        print(\"--codebase was not specified\")\n        error_ctr += 1\n\n    if version is None:\n        print(\"--version was not specified\")\n        error_ctr += 1\n\n    if server is None:\n        print(\"--server was not specified\")\n        error_ctr += 1\n\n    if error_ctr &gt; 0:\n        print(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if project is None:\n        project = DEFAULT_PROJECT\n        print(f\"--project was not specified and therefore was set to default '{project}'\")\n\n    if assignee is None:\n        assignee = DEFAULT_ASSIGNEE\n        print(f\"--assignee was not specified and therefore was set to default '{assignee}'\")\n\n    with open(credential_file, 'r') as f:\n        line = f.readline()\n        line = line.strip()\n        (username, password) = line.split(':')\n        print(f\"read username and password from credentials file default '{credential_file}'\")\n\n    auth_jira = JIRA(url, basic_auth=(username, password))\n    if auth_jira is None:\n        print(f\"Could not instantiate JIRA for url '{url}'\")\n        sys.exit(1)\n\n    global g_url\n    g_url = url\n\n    global g_auth_jira\n    g_auth_jira = auth_jira\n\n    global g_project\n    g_project = project\n\n    global g_assignee\n    g_assignee = assignee\n\n    global g_codebase\n    g_codebase = codebase\n\n    global g_version\n    g_version = version\n\n    global g_server\n    g_server = server\n\n    global g_component\n    g_component = component\n\n    parent_issue_id = create_issue_software_release()\n\n    global g_parent_issue_id\n    g_parent_issue_id = parent_issue_id\n\n    if all:\n        yes_or_no_all = None\n        while yes_or_no_all is None or yes_or_no_all == \"\":\n            print(\"\\nWill create new JIRA issues ALL of the following?\")\n            print(\" establish release candidate\")\n            print(\" prepare change control\")\n            print(\" install software\")\n            print(\" prepare validation documents\")\n            print(\" execute validation checks\")\n            print(\" prepare test cases\")\n            print(\" collect release documents\")\n            yes_or_no_all = input(\"\\nCreate new JIRA issues ALL of those? [Y/n] \")\n\n            if yes_or_no_all is None or yes_or_no_all == \"\":\n                yes_or_no_all = 'Y'\n            if yes_or_no_all == 'Y' or yes_or_no_all == 'y':\n                create_issue_establish_release_candidate()\n                create_issue_prepare_change_control()\n                create_issue_install_software()\n                create_issue_prepare_validation_docs()\n                create_issue_execute_validation_checks()\n                create_issue_test_cases_software()\n                create_issue_collect_release_documents()\n\n            else:\n                print(\"Will not create new JIRA issues for ALL of those.\")\n    else:\n        yes_or_no_1 = None\n        while yes_or_no_1 is None or yes_or_no_1 == '':\n            yes_or_no_1 = input(\"\\nCreate new JIRA issue for 'establish release candidate'? [Y/n] \")\n            if yes_or_no_1 is None or yes_or_no_1 == '':\n                yes_or_no_1 = 'Y'\n            if yes_or_no_1 == 'Y' or yes_or_no_1 == 'y':\n                create_issue_establish_release_candidate()\n            else:\n                print(\"Will not create new JIRA issue for 'establish release candidate'\")\n\n        yes_or_no_2 = None\n        while yes_or_no_2 is None or yes_or_no_2 == '':\n            yes_or_no_2 = input(\"\\nCreate new JIRA issue for 'prepare change control'? [Y/n] \")\n            if yes_or_no_2 is None or yes_or_no_2 == '':\n                yes_or_no_2 = 'Y'\n            if yes_or_no_2 == 'Y' or yes_or_no_2 == 'y':\n                create_issue_prepare_change_control()\n            else:\n                print(\"Will not create new JIRA issue for 'prepare change control'\")\n\n        yes_or_no_3 = None\n        while yes_or_no_3 is None or yes_or_no_3 == '':\n            yes_or_no_3 = input(\"\\nCreate new JIRA issue for 'prepare validation documents'? [Y/n] \")\n            if yes_or_no_3 is None or yes_or_no_3 == '':\n                yes_or_no_3 = 'Y'\n            if yes_or_no_3 == 'Y' or yes_or_no_3 == 'y':\n                create_issue_prepare_validation_docs()\n            else:\n                print(\"Will not create new JIRA issue 'prepare validation documents'\")\n\n        yes_or_no_4 = None\n        while yes_or_no_4 is None or yes_or_no_4 == '':\n            yes_or_no_4 = input(\"\\nCreate 'execute validation checks' JIRA issue? [Y/n] \")\n            if yes_or_no_4 is None or yes_or_no_4 == '':\n                yes_or_no_4 = 'Y'\n            if yes_or_no_4 == 'Y' or yes_or_no_4 == 'y':\n                create_issue_execute_validation_checks()\n            else:\n                print(\"Will not create 'execute validation checks' JIRA issue\")\n\n        yes_or_no_5 = None\n        while yes_or_no_5 is None or yes_or_no_5 == '':\n            yes_or_no_5 = input(\"\\nCreate 'test cases' JIRA issue? [Y/n] \")\n            if yes_or_no_5 is None or yes_or_no_5 == '':\n                yes_or_no_5 = 'Y'\n            if yes_or_no_5 == 'Y' or yes_or_no_5 == 'y':\n                create_issue_test_cases_software()\n            else:\n                print(\"Will not create 'test cases' JIRA issue\")\n\n        yes_or_no_6 = None\n        while yes_or_no_6 is None or yes_or_no_6 == '':\n            yes_or_no_6 = input(\"\\nCreate 'collect release documents' JIRA issue? [Y/n] \")\n            if yes_or_no_6 is None or yes_or_no_6 == '':\n                yes_or_no_6 = 'Y'\n            if yes_or_no_6 == 'Y' or yes_or_no_6 == 'y':\n                create_issue_collect_release_documents()\n            else:\n                print(\"Will not create 'collect release documents' JIRA issue\")\n\n    print(\"Remember to assign the epic link for these new JIRA issues:\")\n    for issue in g_issues:\n        print(f\"{issue}\")\n</code></pre>"},{"location":"jira_epics_to_confluence_tables/","title":"Jira Epics To Confluence Tables module","text":""},{"location":"jira_epics_to_confluence_tables/#jira_python_utils.jira_epics_to_confluence_tables.create_html_content","title":"<code>create_html_content(jira_issue_base_url, epic_name, issues, config)</code>","text":"<p>Create the HTML content for the Confluence page.</p> <p>Parameters:</p> Name Type Description Default <code>jira_issue_base_url</code> <code>str</code> <p>The JIRA issue base url.</p> required <code>epic_name</code> <code>str</code> <p>The epic name.</p> required <code>issues</code> <code>List[Any]</code> <p>The list of issues.</p> required <code>config</code> <code>Dict[str, Any]</code> <p>The configuration object.</p> required Source code in <code>jira_python_utils/jira_epics_to_confluence_tables.py</code> <pre><code>def create_html_content(\n    jira_issue_base_url: str,\n    epic_name: str,\n    issues: List[Any],\n    config: Dict[str, Any]) -&gt; str:\n    \"\"\"Create the HTML content for the Confluence page.\n\n    Args:\n        jira_issue_base_url (str): The JIRA issue base url.\n        epic_name (str): The epic name.\n        issues (List[Any]): The list of issues.\n        config (Dict[str, Any]): The configuration object.\n    \"\"\"\n    in_development_color = config['confluence']['status']['color_codes']['in_development']\n    done_color = config['confluence']['status']['color_codes']['done']\n\n    logging.info(f\"Will add '{len(issues)}' issues to the HTML table for Confluence page with title '{epic_name}'\")\n\n    content = []\n    content.append(f\"&lt;html&gt;&lt;body&gt;&lt;h3&gt;{epic_name}&lt;/h3&gt;\")\n    content.append(\"\"\"&lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Issue&lt;/th&gt;\n                &lt;th&gt;Summary&lt;/th&gt;\n                &lt;th&gt;Type&lt;/th&gt;\n                &lt;th&gt;Priority&lt;/th&gt;\n                &lt;th&gt;Status&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\"\"\")\n\n    for issue in issues:\n        content.append(f\"&lt;tr&gt;&lt;td&gt;&lt;a href='{jira_issue_base_url}/{issue}' target='_blank'&gt;{issue}&lt;/a&gt;&lt;/td&gt;\")\n        content.append(f\"&lt;td&gt;{issue.fields.summary}&lt;/td&gt;\")\n        content.append(f\"&lt;td&gt;{issue.fields.issuetype.name}&lt;/td&gt;\")\n        content.append(f\"&lt;td&gt;{issue.fields.priority.name}&lt;/td&gt;\")\n        status = issue.fields.status.name\n        if status.lower() == 'done':\n            content.append(f\"&lt;td style='font-weight: bold; color: {done_color}'&gt;{status}&lt;/td&gt;&lt;/tr&gt;\")\n        elif status.lower() == 'in development':\n            content.append(f\"&lt;td style='font-weight: bold; color: {in_development_color}'&gt;{status}&lt;/td&gt;&lt;/tr&gt;\")\n        else:\n            content.append(f\"&lt;td&gt;{status}&lt;/td&gt;&lt;/tr&gt;\")\n\n    content.append(\"&lt;/tbody&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;\")\n    return \"\\n\".join(content)\n</code></pre>"},{"location":"jira_epics_to_confluence_tables/#jira_python_utils.jira_epics_to_confluence_tables.get_jira_epic_links","title":"<code>get_jira_epic_links(config, config_file)</code>","text":"<p>Get the JIRA epic links from the configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>_type_</code> <p>The configuration object.</p> required <code>config_file</code> <code>str</code> <p>The configuration file.</p> required <p>Returns:</p> Type Description <code>List[Dict[str, str]]</code> <p>List[Dict[str, str]]: The list of epic links.</p> Source code in <code>jira_python_utils/jira_epics_to_confluence_tables.py</code> <pre><code>def get_jira_epic_links(config, config_file: str) -&gt; List[Dict[str, str]]:\n    \"\"\"Get the JIRA epic links from the configuration file.\n\n    Args:\n        config (_type_): The configuration object.\n        config_file (str): The configuration file.\n\n    Returns:\n        List[Dict[str, str]]: The list of epic links.\n    \"\"\"\n\n    if 'epics' not in config['jira']:\n        print_red(f\"'epics' section does not exist in configuration file '{config_file}'\")\n        sys.exit(1)\n\n    if 'links' not in config['jira']['epics']:\n        print_red(f\"'links' section does not exist in the 'epics' section in the configuration file '{config_file}'\")\n        sys.exit(1)\n\n    links = config['jira']['epics']['links']\n    if links is None or links == '' or len(links) == 0:\n        print_red(f\"Did not find any epic links in the configuration file '{config_file}'\")\n        sys.exit(1)\n\n    return links\n</code></pre>"},{"location":"jira_epics_to_confluence_tables/#jira_python_utils.jira_epics_to_confluence_tables.main","title":"<code>main(assignee, config_file, credential_file, logfile, outdir, query)</code>","text":"<p>Retrieve JIRA issues for epics and create Confluence pages.</p> Source code in <code>jira_python_utils/jira_epics_to_confluence_tables.py</code> <pre><code>@click.command()\n@click.option('--assignee', help='The assignee')\n@click.option('--config_file', type=click.Path(exists=True), help=f\"The configuration file - default is '{DEFAULT_CONFIG_FILE}'\")\n@click.option('--credential_file', help='credential file containing username and password')\n@click.option('--logfile', help=\"The log file\")\n@click.option('--outdir', help=f\"The default is the current working directory - default is '{DEFAULT_OUTDIR}'\")\n@click.option('--query', help='The Jira jql query string')\ndef main(assignee: str, config_file: str, credential_file: str, logfile: str, outdir: str, query: str):\n    \"\"\"Retrieve JIRA issues for epics and create Confluence pages.\"\"\"\n\n    rest_url_file = DEFAULT_URL_FILE\n    check_infile_status(rest_url_file, \"txt\")\n\n    url = get_rest_url(rest_url_file)\n\n    if credential_file is None:\n        credential_file = DEFAULT_CREDENTIAL_FILE\n\n    check_infile_status(credential_file)\n\n    error_ctr = 0\n\n    if error_ctr &gt; 0:\n        print(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n    if config_file is None:\n        config_file = DEFAULT_CONFIG_FILE\n        print_yellow(f\"--config_file was not specified and therefore was set to '{config_file}'\")\n\n    check_infile_status(config_file, \"yaml\")\n\n    logging.basicConfig(\n        filename=logfile,\n        format=LOGGING_FORMAT,\n        level=LOG_LEVEL\n    )\n\n    logging.info(f\"Loading configuration from '{config_file}'\")\n    config = yaml.safe_load(pathlib.Path(config_file).read_text())\n\n    if 'jira' not in config:\n        print_red(f\"'jira' section does not exist in configuration file '{config_file}'\")\n        sys.exit(1)\n\n    links = get_jira_epic_links(config, config_file)\n\n    if assignee is None and 'assignee' in config:\n        assignee = config['jira']['assignee']\n        logging.info(f\"Retrieved assignee '{assignee}' from the configuration file '{config_file}'\")\n\n    jira_issue_base_url = config['jira']['issue_base_url']\n    if jira_issue_base_url is None or jira_issue_base_url == '':\n        print_red(\"Could not find the JIRA issue base url in the configuration file\")\n        sys.exit(1)\n\n    if jira_issue_base_url.endswith('/'):\n        jira_issue_base_url = jira_issue_base_url.rstrip('/')\n\n    logging.info(f\"Found '{len(links)}' epic links in the configuration file '{config_file}'\")\n\n    auth_jira, auth = get_auth_jira(credential_file, url)\n\n    for link in links:\n\n        query = link['query']\n\n        if assignee is not None:\n            query = f\"\"\"{query} AND assignee in ({assignee})\"\"\"\n            logging.info(f\"Added assignee '{assignee}' to the query: {query}\")\n\n        epic_name = link['name']\n        confluence_page_name = link['confluence_page_name']\n\n        logging.info(f\"Will attempt to retrieve issues for epic '{epic_name}' with query '{query}'\")\n\n        try:\n            issues = auth_jira.search_issues(query)\n\n        except Exception as e:\n            print_red(f\"Encountered some exception while attempting to query with JQL '{query}' : '{e}'\")\n            sys.exit(1)\n        else:\n            print(\"Query was successful\")\n\n        html_content = create_html_content(\n            jira_issue_base_url,\n            epic_name,\n            issues,\n            config,\n        )\n\n\n        manager = ConfluenceManager(\n            outdir=outdir,\n            config=config,\n            config_file=config_file,\n        )\n\n        manager.create_page(\n            auth=auth,\n            title=confluence_page_name,\n            html_content=html_content\n        )\n</code></pre>"},{"location":"jira_get_issue_details/","title":"Jira Get Issue Details module","text":"<p>Get the JIRA issue details.</p>"},{"location":"jira_get_issue_details/#jira_python_utils.jira_get_issue_details.main","title":"<code>main(credential_file, issue)</code>","text":"<p>ISSUE : string - the JIRA issue identifier e.g.: RA-478</p> Source code in <code>jira_python_utils/jira_get_issue_details.py</code> <pre><code>@click.command()\n@click.option('--credential_file', help='credential file containing username and password (default is $HOME/.jira/credentials.txt)')\n@click.argument('issue')\ndef main(credential_file: str, issue: str):\n    \"\"\"ISSUE : string - the JIRA issue identifier e.g.: RA-478\"\"\"\n\n    rest_url_file = DEFAULT_URL_FILE\n    check_infile_status(rest_url_file)\n\n    if credential_file is None:\n        credential_file = DEFAULT_CREDENTIAL_FILE\n\n    check_infile_status(credential_file)\n\n    if issue is None:\n        error_console.print(\"issue was not specified\")\n        sys.exit(1)\n\n    auth_jira = get_auth(credential_file, get_jira_url(rest_url_file))\n\n    jira_issue = auth_jira.issue(issue)\n    summary = jira_issue.fields.summary\n    desc = jira_issue.fields.description\n    issue_type = jira_issue.fields.issuetype.name\n    assignee = jira_issue.fields.assignee.name\n    priority = jira_issue.fields.priority.name\n    status = jira_issue.fields.status.name\n\n    console.print(f\"summary '{summary}'\")\n    console.print(f\"description'{desc}'\")\n    console.print(f\"type '{issue_type}'\")\n    console.print(f\"assignee '{assignee}'\")\n    console.print(f\"status '{status}'\")\n    console.print(f\"priority '{priority}'\")\n</code></pre>"},{"location":"jira_initiate_workspace/","title":"Jira Initiate Workspace module","text":"<p>Initiate the JIRA workspace.</p>"},{"location":"jira_initiate_workspace/#jira_python_utils.jira_initiate_workspace.create_jira_directory","title":"<code>create_jira_directory(jira_dir)</code>","text":"<p>Create the JIRA directory if it does not exist.</p> <p>Parameters:</p> Name Type Description Default <code>jira_dir</code> <code>str</code> <p>The JIRA directory.</p> required Source code in <code>jira_python_utils/jira_initiate_workspace.py</code> <pre><code>def create_jira_directory(jira_dir: str) -&gt; None:\n    \"\"\"Create the JIRA directory if it does not exist.\n\n    Args:\n        jira_dir (str): The JIRA directory.\n    \"\"\"\n    if not os.path.exists(jira_dir):\n        pathlib.Path(jira_dir).mkdir(parents=True, exist_ok=True)\n\n        console.print(f\"Created directory '{jira_dir}'\")\n    else:\n        console.print(f\"'{jira_dir}' already exists\")\n</code></pre>"},{"location":"jira_initiate_workspace/#jira_python_utils.jira_initiate_workspace.main","title":"<code>main(jira_id, logfile, outdir)</code>","text":"<p>Initiate the JIRA workspace.</p> <p>Parameters:</p> Name Type Description Default <code>jira_id</code> <code>str</code> <p>The JIRA ticket identifier.</p> required <code>logfile</code> <code>str</code> <p>The log file.</p> required <code>outdir</code> <code>str</code> <p>The output directory.</p> required Source code in <code>jira_python_utils/jira_initiate_workspace.py</code> <pre><code>@click.command()\n@click.option('--jira_id', help='The Jira ticket identifier')\n@click.option('--logfile', help=\"The log file\")\n@click.option('--outdir', help=f\"The default is the current working directory - default is '{DEFAULT_OUTDIR}'\")\ndef main(jira_id: str, logfile: str, outdir: str):\n    \"\"\"Initiate the JIRA workspace.\n\n    Args:\n        jira_id (str): The JIRA ticket identifier.\n        logfile (str): The log file.\n        outdir (str): The output directory.\n    \"\"\"\n    error_ctr = 0\n\n    if jira_id is None:\n        print_red(\"--jira_id was not specified\")\n        error_ctr += 1\n\n    if error_ctr &gt; 0:\n        print_red(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n\n    logging.basicConfig(\n        filename=logfile,\n        format=LOGGING_FORMAT,\n        level=LOG_LEVEL\n    )\n\n    jira_dir = os.path.join(os.getenv(\"HOME\"), \"JIRA\", jira_id)\n    create_jira_directory(jira_dir)\n\n    shared_jira_dir = os.path.join(os.getenv(\"HOME\"), \"vboxshare\", \"JIRA\", jira_id)\n    create_jira_directory(shared_jira_dir)\n</code></pre>"},{"location":"jira_link_issues/","title":"Jira Link Issues module","text":"<p>Link two JIRA issues together.</p>"},{"location":"jira_link_issues/#jira_python_utils.jira_link_issues.main","title":"<code>main(credential_file, child_issue, parent_issue, link_type)</code>","text":"<p>Link two JIRA issues together.</p> <p>Parameters:</p> Name Type Description Default <code>credential_file</code> <code>str</code> <p>The credential file containing username and password.</p> required <code>child_issue</code> <code>str</code> <p>The child issue.</p> required <code>parent_issue</code> <code>str</code> <p>The parent issue.</p> required <code>link_type</code> <code>str</code> <p>The type of link.</p> required Source code in <code>jira_python_utils/jira_link_issues.py</code> <pre><code>@click.command()\n@click.option('--credential_file', help='credential file containing username and password')\n@click.option('--child_issue', help='The child issue')\n@click.option('--parent_issue', help='The parent issue')\n@click.option('--link_type', help='The type of link')\ndef main(credential_file: str, child_issue: str, parent_issue: str, link_type: str):\n    \"\"\"Link two JIRA issues together.\n\n    Args:\n        credential_file (str): The credential file containing username and password.\n        child_issue (str): The child issue.\n        parent_issue (str): The parent issue.\n        link_type (str): The type of link.\n    \"\"\"\n\n    rest_url_file = DEFAULT_URL_FILE\n    check_infile_status(rest_url_file)\n\n    if credential_file is None:\n        credential_file = DEFAULT_CREDENTIAL_FILE\n\n    check_infile_status(credential_file)\n\n    error_ctr = 0\n\n    if child_issue is None:\n        error_console.print(\"--child_issue was not specified\")\n        error_ctr += 1\n\n    if parent_issue is None:\n        error_console.print(\"--parent_issue was not specified\")\n        error_ctr += 1\n\n    if error_ctr &gt; 0:\n        error_console.print(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if link_type is None:\n        link_type = DEFAULT_LINK_TYPE\n        console.print(f\"--link_type was not specified and therefore was set to default '{link_type}'\")\n\n    auth_jira = get_auth(credential_file, get_jira_url(rest_url_file))\n\n    console.print(f\"Will attempt to link JIRA issue '{child_issue}' to '{parent_issue}' with link type '{link_type}'\")\n\n    try:\n\n        auth_jira.create_issue_link(\n            type=link_type,\n            inwardIssue=child_issue,\n            outwardIssue=parent_issue,\n            comment={\n                \"body\": f\"Linking {child_issue} to {parent_issue}\"\n            }\n        )\n\n    except Error as e:\n        error_console.print(f\"Encountered some exception while attempting to link '{child_issue}' to '{parent_issue}' with link type '{link_type}': {e}\")\n        sys.exit(1)\n    else:\n        console.print(f\"Linked '{child_issue}' to '{parent_issue}' with link type '{link_type}'\")\n</code></pre>"},{"location":"jira_remove_watcher/","title":"Jira Remove Watcher module","text":"<p>Remove account from JIRA watchers.</p>"},{"location":"jira_remove_watcher/#jira_python_utils.jira_remove_watcher.main","title":"<code>main(credential_file, username, issue)</code>","text":"<p>Remove account from JIRA watchers.</p> <p>Parameters:</p> Name Type Description Default <code>credential_file</code> <code>str</code> <p>The credential file containing username and password.</p> required <code>username</code> <code>str</code> <p>The username that should be removed from watchers - default will be retrieve from the credential file.</p> required <code>issue</code> <code>str</code> <p>The Jira issue identifier e.g.: RA-478</p> required Source code in <code>jira_python_utils/jira_remove_watcher.py</code> <pre><code>@click.command()\n@click.option('--credential_file', help='credential file containing username and password')\n@click.option('--username', help='the username - default will be retrieve from the credential file')\n@click.argument('issue')\ndef main(credential_file: str, username: str, issue: str):\n    \"\"\"Remove account from JIRA watchers.\n\n    Args:\n        credential_file (str): The credential file containing username and password.\n        username (str): The username that should be removed from watchers - default will be retrieve from the credential file.\n        issue (str): The Jira issue identifier e.g.: RA-478\n    \"\"\"\n\n    rest_url_file = DEFAULT_URL_FILE\n    check_infile_status(rest_url_file)\n\n    if credential_file is None:\n        credential_file = DEFAULT_CREDENTIAL_FILE\n\n    check_infile_status(credential_file)\n\n    if issue is None:\n        error_console.print(\"issue was not specified\")\n        sys.exit(1)\n\n    if username is None:\n        username = get_username(credential_file)\n\n    auth_jira = get_auth(credential_file, get_jira_url(rest_url_file))\n\n    console.print(f\"Will attempt to remove username '{username}' from issue '{issue}'\")\n\n    auth_jira.remove_watcher(issue, username)\n\n    console.print(f\"Removed username '{username}' from watchers for issue '{issue}'\")\n</code></pre>"},{"location":"jira_search_issues/","title":"Jira Search Issues module","text":"<p>Retrieve issues from Jira using JQL.</p>"},{"location":"jira_search_issues/#jira_python_utils.jira_search_issues.main","title":"<code>main(assignee, config_file, credential_file, logfile, outdir, query)</code>","text":"<p>Retrieve issues from Jira using JQL.</p> <p>Parameters:</p> Name Type Description Default <code>assignee</code> <code>str</code> <p>The assignee.</p> required <code>config_file</code> <code>str</code> <p>The configuration file.</p> required <code>credential_file</code> <code>str</code> <p>The credential file.</p> required <code>logfile</code> <code>str</code> <p>The log file.</p> required <code>outdir</code> <code>str</code> <p>The output directory.</p> required <code>query</code> <code>str</code> <p>The Jira jql query string.</p> required Source code in <code>jira_python_utils/jira_search_issues.py</code> <pre><code>@click.command()\n@click.option('--assignee', help='The assignee')\n@click.option('--config_file', type=click.Path(exists=True), help=f\"The configuration file - default is '{DEFAULT_CONFIG_FILE}'\")\n@click.option('--credential_file', help='credential file containing username and password')\n@click.option('--logfile', help=\"The log file\")\n@click.option('--outdir', help=f\"The default is the current working directory - default is '{DEFAULT_OUTDIR}'\")\n@click.option('--query', help='The Jira jql query string')\ndef main(assignee: str, config_file: Optional[str], credential_file: Optional[str], logfile: Optional[str], outdir: Optional[str], query: str):\n    \"\"\"Retrieve issues from Jira using JQL.\n\n    Args:\n        assignee (str): The assignee.\n        config_file (str): The configuration file.\n        credential_file (str): The credential file.\n        logfile (str): The log file.\n        outdir (str): The output directory.\n        query (str): The Jira jql query string.\n    \"\"\"\n\n    rest_url_file = DEFAULT_URL_FILE\n    check_infile_status(rest_url_file, \"txt\")\n\n    url = get_rest_url(rest_url_file)\n\n    if credential_file is None:\n        credential_file = DEFAULT_CREDENTIAL_FILE\n\n    check_infile_status(credential_file)\n\n    error_ctr = 0\n\n    # if not query:\n    #     print(\"--query was not specified\")\n    #     error_ctr += 1\n\n    if error_ctr &gt; 0:\n        print(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n    if config_file is None:\n        config_file = DEFAULT_CONFIG_FILE\n        print_yellow(f\"--config_file was not specified and therefore was set to '{config_file}'\")\n\n    check_infile_status(config_file, \"yaml\")\n\n    logging.basicConfig(\n        filename=logfile,\n        format=LOGGING_FORMAT,\n        level=LOG_LEVEL\n    )\n\n    logging.info(f\"Loading configuration from '{config_file}'\")\n    config = yaml.safe_load(pathlib.Path(config_file).read_text())\n\n    if 'epics' not in config:\n        print_red(f\"'epics' section does not exist in configuration file '{config_file}'\")\n        sys.exit(1)\n\n    if 'links' not in config['epics']:\n        print_red(f\"'links' section does not exist in the 'epics' section in the configuration file '{config_file}'\")\n        sys.exit(1)\n\n    if assignee is None and 'assignee' in config:\n        assignee = config['assignee']\n        logging.info(f\"Retrieved assignee '{assignee}' from the configuration file '{config_file}'\")\n\n    links = config['epics']['links']\n    if links is None or links == '' or len(links) == 0:\n        print_red(f\"Did not find any epic links in the configuration file '{config_file}'\")\n        sys.exit(1)\n\n    logging.info(f\"Found '{len(links)}' epic links in the configuration file '{config_file}'\")\n\n    auth_jira = get_auth(credential_file, url)\n\n    for link in links:\n\n        query = link['query']\n\n        if assignee is not None:\n            query = f\"\"\"{query} AND assignee in ({assignee})\"\"\"\n            logging.info(f\"Added assignee '{assignee}' to the query: {query}\")\n\n        name = link['name']\n        logging.info(f\"Will attempt to retrieve issues for epic '{name}' with query '{query}'\")\n        print(f\"\\n##Will attempt to retrieve issues for epic '{name}' with query '{query}'\")\n        # continue\n\n        try:\n            issues = auth_jira.search_issues(query)\n\n        except Exception as e:\n            print_red(f\"Encountered some exception while attempting to query with JQL '{query}' : '{e}'\")\n            sys.exit(1)\n        else:\n            print(\"Query was successful\")\n\n        print_green(f\"Found '{len(issues)}' issues\")\n        for issue in issues:\n            print(issue)\n            # assignee = jira_issue.fields.assignee.name\n            print(f\"summary '{issue.fields.summary}'\")\n            print(f\"description '{issue.fields.description}'\")\n            print(f\"issue_type '{issue.fields.issuetype.name}'\")\n            print(f\"priority '{issue.fields.priority.name}'\")\n            print(f\"status '{issue.fields.status.name}'\")\n</code></pre>"},{"location":"jira_start_task/","title":"Jira Start Task module","text":"<p>Start a Jira task.</p>"},{"location":"jira_start_task/#jira_python_utils.jira_start_task.create_metadata_file","title":"<code>create_metadata_file(jira_dir, jira_id, url, title)</code>","text":"<p>Create a [jira_id].metadata.json file.</p> <p>This will contain information about the Jira issue that can be parsed by other scripts for report generation.</p> <p>Parameters:</p> Name Type Description Default <code>jira_dir</code> <code>str</code> <p>The Jira issue-specific directory.</p> required <code>jira_id</code> <code>str</code> <p>The Jira issue identifier.</p> required <code>url</code> <code>str</code> <p>The Jira issue-specific URL.</p> required <code>title</code> <code>str</code> <p>The summary of the Jira issue.</p> required Source code in <code>jira_python_utils/jira_start_task.py</code> <pre><code>def create_metadata_file(jira_dir: str, jira_id: str, url: str, title: str) -&gt; None:\n    \"\"\"Create a [jira_id].metadata.json file.\n\n    This will contain information about the Jira issue\n    that can be parsed by other scripts for report generation.\n\n    Args:\n        jira_dir (str): The Jira issue-specific directory.\n        jira_id (str): The Jira issue identifier.\n        url (str): The Jira issue-specific URL.\n        title (str): The summary of the Jira issue.\n    \"\"\"\n    outfile = os.path.join(jira_dir, f\"{jira_id}.metadata.json\")\n    lookup = {\n        \"jira_id\": jira_id,\n        \"url\": url,\n        \"title\": title,\n        \"date\": str(datetime.today().strftime('%Y-%m-%d-%H:%M:%S'))\n    }\n\n    # Write lookup to JSON file\n    with open(outfile, 'w') as of:\n        json.dump(lookup, of)\n\n    logging.info(f\"Wrote metadata file '{outfile}'\")\n    console.print(f\"Wrote metadata file '{outfile}'\")\n</code></pre>"},{"location":"jira_start_task/#jira_python_utils.jira_start_task.create_readme_file","title":"<code>create_readme_file(jira_dir, jira_id, url, title, verbose=constants.DEFAULT_VERBOSE)</code>","text":"<p>Create a README.md file in the Jira issue directory.</p> <p>Parameters:</p> Name Type Description Default <code>jira_dir</code> <code>str</code> <p>The Jira issue-specific directory.</p> required <code>jira_id</code> <code>str</code> <p>The Jira issue identifier.</p> required <code>url</code> <code>str</code> <p>The Jira issue-specific URL.</p> required <code>title</code> <code>str</code> <p>The summary of the Jira issue.</p> required <code>verbose</code> <code>bool</code> <p>If True, print more details to STDOUT. Defaults to DEFAULT_VERBOSE.</p> <code>DEFAULT_VERBOSE</code> Source code in <code>jira_python_utils/jira_start_task.py</code> <pre><code>def create_readme_file(jira_dir: str, jira_id: str, url: str, title: str, verbose: bool = constants.DEFAULT_VERBOSE) -&gt; None:\n    \"\"\"Create a README.md file in the Jira issue directory.\n\n    Args:\n        jira_dir (str): The Jira issue-specific directory.\n        jira_id (str): The Jira issue identifier.\n        url (str): The Jira issue-specific URL.\n        title (str): The summary of the Jira issue.\n        verbose (bool, optional): If True, print more details to STDOUT. Defaults to DEFAULT_VERBOSE.\n    \"\"\"\n    outfile = os.path.join(jira_dir, \"README.md\")\n    if not os.path.exists(outfile):\n        with open(outfile, 'w') as of:\n            of.write(f\"# Jira ID: {jira_id}\\n\")\n            of.write(f\"URL: {url}\\n&lt;br&gt;\\n\")\n            of.write(f\"Date: {str(datetime.today().strftime('%Y-%m-%d-%H:%M:%S'))}\\n&lt;br&gt;\\n\")\n            if title is not None:\n                of.write(f\"Title: {title}\\n&lt;br&gt;\\n\")\n\n        logging.info(f\"Wrote file '{outfile}'\")\n        if verbose:\n            console.print(f\"Wrote file '{outfile}'\")\n    console.print(f\"README file is ready: '{outfile}'\")\n</code></pre>"},{"location":"jira_start_task/#jira_python_utils.jira_start_task.create_symlink_directory","title":"<code>create_symlink_directory(jira_dir, verbose=constants.DEFAULT_VERBOSE)</code>","text":"<p>Create a symlink to the Jira issue-specific directory in the user's home directory.</p> <p>Parameters:</p> Name Type Description Default <code>jira_dir</code> <code>str</code> <p>The Jira issue-specific directory.</p> required <code>verbose</code> <code>bool</code> <p>If true print more info to STDOUT. Defaults to DEFAULT_VERBOSE.</p> <code>DEFAULT_VERBOSE</code> Source code in <code>jira_python_utils/jira_start_task.py</code> <pre><code>def create_symlink_directory(jira_dir: str, verbose: bool = constants.DEFAULT_VERBOSE) -&gt; None:\n    \"\"\"Create a symlink to the Jira issue-specific directory in the user's home directory.\n\n    Args:\n        jira_dir (str): The Jira issue-specific directory.\n        verbose (bool, optional): If true print more info to STDOUT. Defaults to DEFAULT_VERBOSE.\n    \"\"\"\n\n    home_jira_dir = get_home_jira_dir()\n    target_dir = os.path.join(home_jira_dir, os.path.basename(jira_dir))\n\n    print_yellow(f\"Creating symlink '{target_dir}' -&gt; '{jira_dir}'\")\n\n    # create the symlink\n    os.symlink(jira_dir, target_dir)\n\n    # verify the symlink was created successfully\n    if os.path.islink(target_dir):\n        logging.info(f\"Symlink created: {target_dir} -&gt; {jira_dir}\")\n        if verbose:\n            console.print(f\"Symlink created: {target_dir} -&gt; {jira_dir}\")\n    else:\n        error_console.print(f\"Could not create symlink '{target_dir}'\")\n        sys.exit(1)\n</code></pre>"},{"location":"jira_start_task/#jira_python_utils.jira_start_task.echo_script","title":"<code>echo_script(jira_id, jira_dir)</code>","text":"<p>Echo the script command to execute when ready to start.</p> <p>Parameters:</p> Name Type Description Default <code>jira_id</code> <code>str</code> <p>The Jira issue identifier.</p> required <code>jira_dir</code> <code>str</code> <p>The Jira issue-specific directory.</p> required Source code in <code>jira_python_utils/jira_start_task.py</code> <pre><code>def echo_script(jira_id: str, jira_dir: str) -&gt; None:\n    \"\"\"Echo the script command to execute when ready to start.\n\n    Args:\n        jira_id (str): The Jira issue identifier.\n        jira_dir (str): The Jira issue-specific directory.\n    \"\"\"\n    console.print(\"Execute this when ready to start:\")\n    outfile = os.path.join(jira_dir, f\"script_{constants.DEFAULT_TIMESTAMP}.txt\")\n    console.print(f\"script -q {outfile}[/]\")\n    console.print(f\"echo 'Starting task {jira_id}'[/]\")\n</code></pre>"},{"location":"jira_start_task/#jira_python_utils.jira_start_task.get_home_jira_dir","title":"<code>get_home_jira_dir()</code>","text":"<p>Derive the Jira directory in the user's home directory.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The Jira directory in the user's home directory.</p> Source code in <code>jira_python_utils/jira_start_task.py</code> <pre><code>def get_home_jira_dir() -&gt; str:\n    \"\"\"Derive the Jira directory in the user's home directory.\n\n    Returns:\n        str: The Jira directory in the user's home directory.\n    \"\"\"\n    home_jira_dir = os.path.join(os.getenv(\"HOME\"), \"JIRA\")\n    if not os.path.exists(home_jira_dir):\n        pathlib.Path(home_jira_dir).mkdir(parents=True, exist_ok=True)\n        logging.info(f\"Created directory '{home_jira_dir}'\")\n    return home_jira_dir\n</code></pre>"},{"location":"jira_start_task/#jira_python_utils.jira_start_task.initialize_jira_directory","title":"<code>initialize_jira_directory(jira_root_dir, jira_id, verbose=constants.DEFAULT_VERBOSE)</code>","text":"<p>Create the Jira id directory and return the that path.</p> <p>Parameters:</p> Name Type Description Default <code>jira_root_dir</code> <code>str</code> <p>The root directory where the Jira issue-specific directory will be created</p> required <code>jira_id</code> <code>str</code> <p>The Jira issue id</p> required <p>Returns:</p> Name Type Description <code>dir</code> <code>str</code> <p>The absolute path to the Jira issue directory created</p> Source code in <code>jira_python_utils/jira_start_task.py</code> <pre><code>def initialize_jira_directory(jira_root_dir: str, jira_id: str, verbose: bool = constants.DEFAULT_VERBOSE) -&gt; str:\n    \"\"\"Create the Jira id directory and return the that path.\n\n    Args:\n        jira_root_dir (str): The root directory where the Jira issue-specific directory will be created\n        jira_id (str): The Jira issue id\n\n    Returns:\n        dir (str): The absolute path to the Jira issue directory created\n    \"\"\"\n    jira_dir = os.path.join(jira_root_dir, jira_id)\n    if not os.path.exists(jira_dir):\n        pathlib.Path(jira_dir).mkdir(parents=True, exist_ok=True)\n\n        logging.info(f\"Created directory '{jira_dir}'\")\n        if verbose:\n            console.print(f\"Created directory '{jira_dir}'\")\n    else:\n        logging.info(f\"'{jira_dir}' already exists\")\n        if verbose:\n            console.print(f\"'{jira_dir}' already exists\")\n\n    return jira_dir\n</code></pre>"},{"location":"jira_start_task/#jira_python_utils.jira_start_task.main","title":"<code>main(config_file, credential_file, jira_id, jira_root_dir, logfile, outdir, verbose)</code>","text":"<p>Start a Jira task.</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>Optional[str]</code> <p>The configuration YAML file.</p> required <code>credential_file</code> <code>Optional[str]</code> <p>The file containing the username and password for logging into Jira.</p> required <code>jira_id</code> <code>str</code> <p>The Jira ticket identifier.</p> required <code>jira_root_dir</code> <code>str</code> <p>The root directory where your Jira issue-specific subdirectories are created.</p> required <code>logfile</code> <code>Optional[str]</code> <p>The log file.</p> required <code>outdir</code> <code>Optional[str]</code> <p>The default is the current working directory - default is '{DEFAULT_OUTDIR}'.</p> required <code>verbose</code> <code>Optional[bool]</code> <p>If true, print more info to STDOUT - default is '{DEFAULT_VERBOSE}'.</p> required Source code in <code>jira_python_utils/jira_start_task.py</code> <pre><code>@click.command()\n@click.option('--config_file', help=f\"Optional: The configuration YAML file - default is '{constants.DEFAULT_CONFIG_FILE}'\")\n@click.option('--credential_file', help=f\"Optional: The file containing the username and password for logging into Jira - default is '{constants.DEFAULT_CREDENTIAL_FILE}'\")\n@click.option('--jira_id', help='Required: The Jira ticket identifier')\n@click.option('--jira_root_dir', help='Optional: The root directory where your Jira issue-specific subdirectories are created')\n@click.option('--logfile', help=\"Optional: The log file\")\n@click.option('--outdir', help=f\"Optional: The default is the current working directory - default is '{DEFAULT_OUTDIR}'\")\n@click.option('--verbose', is_flag=True, help=f\"Will print more info to STDOUT - default is '{constants.DEFAULT_VERBOSE}'\")\ndef main(config_file: Optional[str], credential_file: Optional[str], jira_id: str, jira_root_dir: str, logfile: Optional[str], outdir: Optional[str], verbose: Optional[bool]):\n    \"\"\"Start a Jira task.\n\n    Args:\n        config_file (Optional[str]): The configuration YAML file.\n        credential_file (Optional[str]): The file containing the username and password for logging into Jira.\n        jira_id (str): The Jira ticket identifier.\n        jira_root_dir (str): The root directory where your Jira issue-specific subdirectories are created.\n        logfile (Optional[str]): The log file.\n        outdir (Optional[str]): The default is the current working directory - default is '{DEFAULT_OUTDIR}'.\n        verbose (Optional[bool]): If true, print more info to STDOUT - default is '{DEFAULT_VERBOSE}'.\n    \"\"\"\n\n    error_ctr = 0\n\n    if jira_id is None:\n        print_red(\"--jira_id was not specified\")\n        error_ctr += 1\n\n    if error_ctr &gt; 0:\n        print_red(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if config_file is None:\n        config_file = constants.DEFAULT_CONFIG_FILE\n        print_yellow(f\"--config_file was not specified and therefore was set to '{config_file}'\")\n\n    check_infile_status(config_file, \"yaml\")\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n    if verbose is None:\n        verbose = constants.DEFAULT_VERBOSE\n        print_yellow(f\"--verbose was not specified and therefore was set to '{verbose}'\")\n\n    rest_url_file = constants.DEFAULT_URL_FILE\n    check_infile_status(rest_url_file)\n\n    if credential_file is None:\n        credential_file = constants.DEFAULT_CREDENTIAL_FILE\n\n    if os.path.exists(credential_file):\n        check_infile_status(credential_file)\n\n    logging.basicConfig(\n        filename=logfile,\n        format=constants.LOGGING_FORMAT,\n        level=constants.LOG_LEVEL\n    )\n\n\n    logging.info(f\"Will load contents of config file '{config_file}'\")\n    config = yaml.safe_load(Path(config_file).read_text())\n\n    if jira_root_dir is None:\n        if \"jira_root_dir\" in config:\n            jira_root_dir = config['jira_root_dir']\n            if jira_root_dir is None or jira_root_dir == \"\":\n                jira_root_dir = constants.DEFAULT_JIRA_ROOT_DIR\n                print_yellow(f\"jira_root_dir could not be derived from the configuration file '{config_file}' and so was set to default '{jira_root_dir}'\")\n            else:\n                print_yellow(f\"jira_root_dir was read from the configuration file '{config_file}' and set to '{jira_root_dir}'\")\n        else:\n            jira_root_dir = constants.DEFAULT_JIRA_ROOT_DIR\n            print_yellow(f\"jira_root_dir could not be derived from the configuration file '{config_file}' and so was set to default '{jira_root_dir}'\")\n\n    if not os.path.exists(jira_root_dir):\n        pathlib.Path(jira_root_dir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created JIRA root directory '{jira_root_dir}'\")\n\n    jira_base_url = get_jira_url(rest_url_file)\n\n    url = f\"{jira_base_url}/browse/{jira_id}\"\n\n    logging.info(f\"{url=}\")\n\n    jira_dir = initialize_jira_directory(jira_root_dir, jira_id, verbose)\n\n    create_symlink_directory(jira_dir, verbose)\n\n    summary = None\n    if credential_file and os.path.exists(credential_file):\n        summary = get_summary(jira_id, credential_file, rest_url_file)\n\n    create_readme_file(jira_dir, jira_id, url, summary, verbose)\n\n    create_metadata_file(jira_dir, jira_id, url, summary)\n\n    echo_script(jira_id, jira_dir)\n</code></pre>"},{"location":"jira_sync_workspace/","title":"Jira Sync Workspace module","text":"<p>Synchronize the Jira workspace with the shared Jira workspace.</p>"},{"location":"jira_sync_workspace/#jira_python_utils.jira_sync_workspace.get_file_list","title":"<code>get_file_list(indir=None, extension=None)</code>","text":"<p>Get the list of files in the specified directory.</p> <p>:param indir: {str} - the directory to search for files :param extension: {str} - the file extension to filter on :returns file_list: {list} - the list of files found in the directory</p> Source code in <code>jira_python_utils/jira_sync_workspace.py</code> <pre><code>def get_file_list(indir: str = None, extension: str = None) -&gt; list:\n    \"\"\"Get the list of files in the specified directory.\n\n    :param indir: {str} - the directory to search for files\n    :param extension: {str} - the file extension to filter on\n    :returns file_list: {list} - the list of files found in the directory\n    \"\"\"\n    if extension is None:\n        logging.info(f\"Going to search for files in directory '{indir}'\")\n    else:\n        logging.info(f\"Going to search for files with extension '{extension}' in directory '{indir}'\")\n\n    file_list = []\n    for dirpath, dirnames, filenames in os.walk(indir):\n        if 'venv' in dirpath:\n            logging.info(f\"Going to ignore files in directory '{dirpath}'\")\n            continue\n        for name in filenames:\n            path = os.path.normpath(os.path.join(dirpath, name))\n            if os.path.isfile(path):\n                if extension is not None:\n                    if os.path.endswith('.{extension}'):\n                        file_list.append(path)\n                else:\n                    file_list.append(path)\n\n    return file_list\n</code></pre>"},{"location":"jira_sync_workspace/#jira_python_utils.jira_sync_workspace.get_files_lookup","title":"<code>get_files_lookup(indir)</code>","text":"<p>Get the lookup of files in the specified directory.</p> <p>Parameters:</p> Name Type Description Default <code>indir</code> <code>str</code> <p>The directory to search for files.</p> required <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>Dict[str, str]: The lookup of files found in the directory.</p> Source code in <code>jira_python_utils/jira_sync_workspace.py</code> <pre><code>def get_files_lookup(indir: str) -&gt; Dict[str, str]:\n    \"\"\"Get the lookup of files in the specified directory.\n\n    Args:\n        indir (str): The directory to search for files.\n\n    Returns:\n        Dict[str, str]: The lookup of files found in the directory.\n    \"\"\"\n    file_list = get_file_list(indir)\n    lookup = {}\n    for f in file_list:\n        key = f.replace(indir, \"\")\n        if key.startswith(\"/\"):\n            key = key.lstrip(\"/\")\n\n        lookup[key] = f\n    return lookup\n</code></pre>"},{"location":"jira_sync_workspace/#jira_python_utils.jira_sync_workspace.main","title":"<code>main(config_file, jira_id, logfile, outdir, outfile)</code>","text":"<p>Synchronize the Jira workspace with the shared Jira workspace.</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>Optional[str]</code> <p>The configuration file.</p> required <code>jira_id</code> <code>str</code> <p>The Jira ticket identifier.</p> required <code>logfile</code> <code>Optional[str]</code> <p>The log file.</p> required <code>outdir</code> <code>Optional[str]</code> <p>The output directory.</p> required <code>outfile</code> <code>Optional[str]</code> <p>The output file.</p> required Source code in <code>jira_python_utils/jira_sync_workspace.py</code> <pre><code>@click.command()\n@click.option('--config_file', type=click.Path(exists=True), help=f\"The configuration file - default is '{DEFAULT_CONFIG_FILE}'\")\n@click.option('--jira_id', help='The Jira ticket identifier')\n@click.option('--logfile', help=\"The log file\")\n@click.option('--outdir', help=f\"The default is the current working directory - default is '{DEFAULT_OUTDIR}'\")\n@click.option('--outfile', help=\"The output file\")\ndef main(config_file: Optional[str], jira_id: str, logfile: Optional[str], outdir: Optional[str], outfile: Optional[str]):\n    \"\"\"Synchronize the Jira workspace with the shared Jira workspace.\n\n    Args:\n        config_file (Optional[str]): The configuration file.\n        jira_id (str): The Jira ticket identifier.\n        logfile (Optional[str]): The log file.\n        outdir (Optional[str]): The output directory.\n        outfile (Optional[str]): The output file.\n    \"\"\"\n\n    error_ctr = 0\n\n    if jira_id is None:\n        print_red(\"--jira_id was not specified\")\n        error_ctr += 1\n\n    if error_ctr &gt; 0:\n        print(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n    if outfile is None:\n        outfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.sh'\n        )\n        print_yellow(f\"--outfile was not specified and therefore was set to '{outfile}'\")\n\n    if config_file is None:\n        config_file = DEFAULT_CONFIG_FILE\n        print_yellow(f\"--config_file was not specified and therefore was set to '{config_file}'\")\n\n    check_infile_status(config_file)\n\n    logging.basicConfig(\n        filename=logfile,\n        format=LOGGING_FORMAT,\n        level=LOG_LEVEL\n    )\n\n    logging.info(f\"Loading configuration from '{config_file}'\")\n    config = yaml.safe_load(pathlib.Path(config_file).read_text())\n\n    jira_dir = os.path.join(config[\"main_jira_work_dir\"], jira_id)\n    if jira_dir.endswith(\"/\"):\n        jira_dir.rstrip(\"/\")\n\n    jira_dir_exists = False\n    if not os.path.exists(jira_dir):\n        pathlib.Path(jira_dir).mkdir(parents=True, exist_ok=True)\n        print(f\"Created directory '{jira_dir}'\")\n    else:\n        jira_dir_exists = True\n        logging.info(f\"'{jira_dir}' exists\")\n\n    shared_jira_dir = os.path.join(config[\"shared_jira_work_dir\"], jira_id)\n    if shared_jira_dir.endswith(\"/\"):\n        shared_jira_dir.rstrip(\"/\")\n    shared_jira_dir_exists = False\n\n    if not os.path.exists(shared_jira_dir):\n        print_red(\"Please execute the following:\\n\")\n\n        pathlib.Path(shared_jira_dir).mkdir(parents=True, exist_ok=True)\n\n        print_red(f\"sudo mkdir -p {shared_jira_dir}\")\n        print(\"And then rerun this program.\")\n        sys.exit(1)\n    else:\n        logging.info(f\"'{shared_jira_dir}' exists\")\n        shared_jira_dir_exists = True\n\n    if shared_jira_dir_exists and jira_dir_exists:\n        sync_directories(\n            shared_jira_dir,\n            jira_dir,\n            config,\n            config_file,\n            logfile,\n            outfile\n        )\n</code></pre>"},{"location":"jira_sync_workspace/#jira_python_utils.jira_sync_workspace.prepare_commands","title":"<code>prepare_commands(source_lookup, target_lookup, source_dir, target_dir, cmds)</code>","text":"<p>Prepare the commands to synchronize the two directories.</p> <p>Parameters:</p> Name Type Description Default <code>source_lookup</code> <code>Dict[str, str]</code> <p>The lookup of files in the source directory.</p> required <code>target_lookup</code> <code>Dict[str, str]</code> <p>The lookup of files in the target directory.</p> required <code>source_dir</code> <code>str</code> <p>The source directory.</p> required <code>target_dir</code> <code>str</code> <p>The target directory.</p> required <code>cmds</code> <code>List[str]</code> <p>The list of commands to execute.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: The list of commands to execute.</p> Source code in <code>jira_python_utils/jira_sync_workspace.py</code> <pre><code>def prepare_commands(source_lookup: Dict[str, str], target_lookup: Dict[str, str], source_dir: str, target_dir: str, cmds: List[str]) -&gt; List[str]:\n    \"\"\"Prepare the commands to synchronize the two directories.\n\n    Args:\n        source_lookup (Dict[str, str]): The lookup of files in the source directory.\n        target_lookup (Dict[str, str]): The lookup of files in the target directory.\n        source_dir (str): The source directory.\n        target_dir (str): The target directory.\n        cmds (List[str]): The list of commands to execute.\n\n    Returns:\n        List[str]: The list of commands to execute.\n    \"\"\"\n    for filekey, filepath in source_lookup.items():\n        if filekey not in target_lookup:\n            logging.info(f\"Will copy '{filepath}' to '{target_dir}'\")\n            target_file = f\"{target_dir}/{filekey}\"\n            dirname = os.path.dirname(target_file)\n            if not os.path.exists(dirname):\n                cmd = f\"sudo mkdir -p {dirname}\"\n                cmds.append(cmd)\n            cmd = f\"sudo cp {filepath} {target_file}\"\n            cmds.append(cmd)\n        else:\n            target_file = target_lookup[filekey]\n            if not filecmp.cmp(filepath, target_file):\n                print(f\"{target_file=} {filepath=} are different\")\n                logging.info(f\"File '{filekey}' already exists in '{target_dir}' - you will need to determine which is most up-to-date and copy that one to the destination\")\n            else:\n                logging.info(f\"No action required since these two files are the same: {target_file=} {filepath=}\")\n\n    return cmds\n</code></pre>"},{"location":"jira_sync_workspace/#jira_python_utils.jira_sync_workspace.sync_directories","title":"<code>sync_directories(shared_jira_dir, jira_dir, config, config_file, logfile, outfile)</code>","text":"<p>Synchronize the two directories.</p> <p>Parameters:</p> Name Type Description Default <code>shared_jira_dir</code> <code>_type_</code> <p>The shared Jira directory.</p> required <code>jira_dir</code> <code>_type_</code> <p>The Jira directory.</p> required <code>config</code> <code>_type_</code> <p>The configuration object.</p> required <code>config_file</code> <code>_type_</code> <p>The configuration file.</p> required <code>logfile</code> <code>_type_</code> <p>The log file.</p> required <code>outfile</code> <code>_type_</code> <p>The output file.</p> required Source code in <code>jira_python_utils/jira_sync_workspace.py</code> <pre><code>def sync_directories(shared_jira_dir, jira_dir, config, config_file, logfile, outfile) -&gt; None:\n    \"\"\"Synchronize the two directories.\n\n    Args:\n        shared_jira_dir (_type_): The shared Jira directory.\n        jira_dir (_type_): The Jira directory.\n        config (_type_): The configuration object.\n        config_file (_type_): The configuration file.\n        logfile (_type_): The log file.\n        outfile (_type_): The output file.\n    \"\"\"\n    jira_dir_lookup = get_files_lookup(jira_dir)\n    logging.info(f\"{jira_dir_lookup=}\")\n\n    shared_jira_dir_lookup = get_files_lookup(shared_jira_dir)\n    logging.info(f\"{shared_jira_dir_lookup=}\")\n\n    cmds = []\n\n    prepare_commands(\n        source_lookup=jira_dir_lookup,\n        target_lookup=shared_jira_dir_lookup,\n        source_dir=jira_dir,\n        target_dir=shared_jira_dir,\n        cmds=cmds\n    )\n\n    prepare_commands(\n        source_lookup=shared_jira_dir_lookup,\n        target_lookup=jira_dir_lookup,\n        source_dir=shared_jira_dir,\n        target_dir=jira_dir,\n        cmds=cmds\n    )\n\n    if len(cmds) &gt; 0:\n\n        user = os.environ.get('USER')\n        cmd = f\"sudo chown -R {user}.{user} {jira_dir}\"\n        cmds.append(cmd)\n\n        cmd = f\"sudo chown -R {user}.{user} {shared_jira_dir}\"\n        cmds.append(cmd)\n\n        with open(outfile, 'w') as of:\n            of.write(\"#!/usr/bin/bash\\n\")\n            of.write(f\"## method-created: {os.path.abspath(__file__)}\\n\")\n            of.write(f\"## date-created: {str(datetime.today().strftime('%Y-%m-%d-%H%M%S'))}\\n\")\n            of.write(f\"## created-by: {user}\\n\")\n            of.write(f\"## logfile: {logfile}\\n\")\n            of.write(f\"## config_file: {config_file}\\n\")\n\n            for cmd in cmds:\n                of.write(f\"{cmd}\\n\")\n\n        logging.info(f\"Wrote file '{outfile}'\")\n        print(f\"Wrote file '{outfile}'\")\n    else:\n        print_green(\"Both directories are already synced!\")\n</code></pre>"},{"location":"jira_to_confluence_weekly_progress_report/","title":"Jira To Confluence Weekly Progress Report module","text":"<p>Retrieve the list of resolved issues for the specified assignee between the start date and end date and create a Confluence page with the list of issues.</p>"},{"location":"jira_to_confluence_weekly_progress_report/#jira_python_utils.jira_to_confluence_weekly_progress_report.create_html_content","title":"<code>create_html_content(jira_issue_base_url, title, issues, config)</code>","text":"<p>Create the HTML table that will be inserted into the new Confluence page.</p> <p>Parameters:</p> Name Type Description Default <code>jira_issue_base_url</code> <code>str</code> <p>The JIRA issue base url.</p> required <code>title</code> <code>str</code> <p>The title of the Confluence page.</p> required <code>issues</code> <code>List[Any]</code> <p>The list of issues.</p> required <code>config</code> <code>Dict[str, Any]</code> <p>The configuration object.</p> required <p>Returns:     str: The HTML table.</p> Source code in <code>jira_python_utils/jira_to_confluence_weekly_progress_report.py</code> <pre><code>def create_html_content(\n    jira_issue_base_url: str,\n    title: str,\n    issues: List[Any],\n    config: Dict[str, Any]) -&gt; str:\n    \"\"\"Create the HTML table that will be inserted into the new Confluence\n    page.\n\n    Args:\n        jira_issue_base_url (str): The JIRA issue base url.\n        title (str): The title of the Confluence page.\n        issues (List[Any]): The list of issues.\n        config (Dict[str, Any]): The configuration object.\n    Returns:\n        str: The HTML table.\n    \"\"\"\n    in_development_color = config['confluence']['status']['color_codes']['in_development']\n    done_color = config['confluence']['status']['color_codes']['done']\n\n    logging.info(f\"Will add '{len(issues)}' issues to the HTML table for Confluence page with title '{title}'\")\n\n    content = []\n    content.append(f\"&lt;html&gt;&lt;body&gt;&lt;h3&gt;{title}&lt;/h3&gt;\")\n    content.append(\"\"\"&lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Issue&lt;/th&gt;\n                &lt;th&gt;Summary&lt;/th&gt;\n                &lt;th&gt;Type&lt;/th&gt;\n                &lt;th&gt;Priority&lt;/th&gt;\n                &lt;th&gt;Status&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\"\"\")\n\n    for issue in issues:\n        status = issue.fields.status.name\n        if status.lower() == 'in development' or status.lower() == 'done' or status.lower() == 'on hold':\n            content.append(f\"&lt;tr&gt;&lt;td&gt;&lt;a href='{jira_issue_base_url}/{issue}' target='_blank'&gt;{issue}&lt;/a&gt;&lt;/td&gt;\")\n            content.append(f\"&lt;td&gt;{issue.fields.summary}&lt;/td&gt;\")\n            content.append(f\"&lt;td&gt;{issue.fields.issuetype.name}&lt;/td&gt;\")\n            content.append(f\"&lt;td&gt;{issue.fields.priority.name}&lt;/td&gt;\")\n            if status.lower() == 'done':\n                content.append(f\"&lt;td style='font-weight: bold; color: {done_color}'&gt;{status}&lt;/td&gt;&lt;/tr&gt;\")\n            elif status.lower() == 'in development':\n                content.append(f\"&lt;td style='font-weight: bold; color: {in_development_color}'&gt;{status}&lt;/td&gt;&lt;/tr&gt;\")\n            elif status.lower() == 'on hold':\n                content.append(f\"&lt;td style='font-weight: bold; color: {in_development_color}'&gt;{status}&lt;/td&gt;&lt;/tr&gt;\")\n            else:\n                content.append(f\"&lt;td&gt;{status}&lt;/td&gt;&lt;/tr&gt;\")\n\n    content.append(\"&lt;/tbody&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;\")\n    return \"\\n\".join(content)\n</code></pre>"},{"location":"jira_to_confluence_weekly_progress_report/#jira_python_utils.jira_to_confluence_weekly_progress_report.get_in_development_issues","title":"<code>get_in_development_issues(start_date, end_date, assignee, auth_jira)</code>","text":"<p>Get the list of issues that are in development for the specified assignee between the start date and end date.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>The start date in the format 'YYYY-MM-DD'.</p> required <code>end_date</code> <code>str</code> <p>The end date in the format 'YYYY-MM-DD'.</p> required <code>assignee</code> <code>str</code> <p>The assignee.</p> required <code>auth_jira</code> <code>JIRA</code> <p>The authenticated JIRA object.</p> required <p>Returns:     List[Any]: The list of issues that are in development.</p> Source code in <code>jira_python_utils/jira_to_confluence_weekly_progress_report.py</code> <pre><code>def get_in_development_issues(start_date: str, end_date: str, assignee: str, auth_jira: JIRA) -&gt; List[Any]:\n    \"\"\"Get the list of issues that are in development for the specified assignee between the start date and end date.\n\n    Args:\n        start_date (str): The start date in the format 'YYYY-MM-DD'.\n        end_date (str): The end date in the format 'YYYY-MM-DD'.\n        assignee (str): The assignee.\n        auth_jira (JIRA): The authenticated JIRA object.\n    Returns:\n        List[Any]: The list of issues that are in development.\n    \"\"\"\n    query = f\"\"\"status = 'In Development' AND updated&gt;= {start_date} AND updated &lt;= {end_date}\"\"\"\n\n    if assignee is not None:\n        query = f\"\"\"{query} AND assignee in ({assignee})\"\"\"\n        logging.info(f\"Added assignee '{assignee}' to the query: {query}\")\n\n    return get_issues(query, auth_jira)\n</code></pre>"},{"location":"jira_to_confluence_weekly_progress_report/#jira_python_utils.jira_to_confluence_weekly_progress_report.get_issues","title":"<code>get_issues(query, auth_jira)</code>","text":"<p>Get the list of issues for the specified query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The JQL query.</p> required <code>auth_jira</code> <code>JIRA</code> <p>The authenticated JIRA object.</p> required <p>Returns:</p> Type Description <code>List[Any]</code> <p>List[Any]: The list of issues.</p> Source code in <code>jira_python_utils/jira_to_confluence_weekly_progress_report.py</code> <pre><code>def get_issues(query: str, auth_jira: JIRA) -&gt; List[Any]:\n    \"\"\"Get the list of issues for the specified query.\n\n    Args:\n        query (str): The JQL query.\n        auth_jira (JIRA): The authenticated JIRA object.\n\n    Returns:\n        List[Any]: The list of issues.\n    \"\"\"\n    logging.info(f\"Will attempt to retrieve issues with query '{query}'\")\n\n    try:\n        issues = auth_jira.search_issues(query)\n\n    except Exception as e:\n        print_red(f\"Encountered some exception while attempting to query with JQL '{query}' : '{e}'\")\n        sys.exit(1)\n    else:\n        print(\"Query was successful\")\n    return issues\n</code></pre>"},{"location":"jira_to_confluence_weekly_progress_report/#jira_python_utils.jira_to_confluence_weekly_progress_report.get_jira_issue_base_url","title":"<code>get_jira_issue_base_url(config)</code>","text":"<p>Get the JIRA issue base url from the configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Dict[str, Any]</code> <p>The configuration object.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The JIRA issue base url.</p> Source code in <code>jira_python_utils/jira_to_confluence_weekly_progress_report.py</code> <pre><code>def get_jira_issue_base_url(config: Dict[str, Any]) -&gt; str:\n    \"\"\"Get the JIRA issue base url from the configuration file.\n\n    Args:\n        config (Dict[str, Any]): The configuration object.\n\n    Returns:\n        str: The JIRA issue base url.\n    \"\"\"\n    jira_issue_base_url = config['jira']['issue_base_url']\n    if jira_issue_base_url is None or jira_issue_base_url == '':\n        print_red(\"Could not find the JIRA issue base url in the configuration file\")\n        sys.exit(1)\n\n    if jira_issue_base_url.endswith('/'):\n        jira_issue_base_url = jira_issue_base_url.rstrip('/')\n\n    return jira_issue_base_url\n</code></pre>"},{"location":"jira_to_confluence_weekly_progress_report/#jira_python_utils.jira_to_confluence_weekly_progress_report.get_on_hold_issues","title":"<code>get_on_hold_issues(start_date, end_date, assignee, auth_jira)</code>","text":"<p>Get the list of issues that are on hold for the specified assignee between the start date and end date.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>The start date in the format 'YYYY-MM-DD'.</p> required <code>end_date</code> <code>str</code> <p>The end date in the format 'YYYY-MM-DD'.</p> required <code>assignee</code> <code>str</code> <p>The assignee.</p> required <code>auth_jira</code> <code>JIRA</code> <p>The authenticated JIRA object.</p> required <p>Returns:     List[Any]: The list of issues that are on hold.</p> Source code in <code>jira_python_utils/jira_to_confluence_weekly_progress_report.py</code> <pre><code>def get_on_hold_issues(start_date: str, end_date: str, assignee: str, auth_jira: JIRA) -&gt; List[Any]:\n    \"\"\"Get the list of issues that are on hold for the specified assignee between the start date and end date.\n\n    Args:\n        start_date (str): The start date in the format 'YYYY-MM-DD'.\n        end_date (str): The end date in the format 'YYYY-MM-DD'.\n        assignee (str): The assignee.\n        auth_jira (JIRA): The authenticated JIRA object.\n    Returns:\n        List[Any]: The list of issues that are on hold.\n    \"\"\"\n    query = f\"\"\"status = 'On Hold' AND updated&gt;= {start_date} AND updated &lt;= {end_date}\"\"\"\n\n    if assignee is not None:\n        query = f\"\"\"{query} AND assignee in ({assignee})\"\"\"\n        logging.info(f\"Added assignee '{assignee}' to the query: {query}\")\n\n    return get_issues(query, auth_jira)\n</code></pre>"},{"location":"jira_to_confluence_weekly_progress_report/#jira_python_utils.jira_to_confluence_weekly_progress_report.get_resolved_issues","title":"<code>get_resolved_issues(start_date, end_date, assignee, auth_jira)</code>","text":"<p>Get the list of resolved issues for the specified assignee between the start date and end date.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>The start date in the format 'YYYY-MM-DD'</p> required <code>end_date</code> <code>str</code> <p>The end date in the format 'YYYY-MM-DD'</p> required <code>assignee</code> <code>str</code> <p>The assignee</p> required <code>auth_jira</code> <code>JIRA</code> <p>The authenticated JIRA object</p> required <p>Returns:     List[Any]: The list of resolved issues</p> Source code in <code>jira_python_utils/jira_to_confluence_weekly_progress_report.py</code> <pre><code>def get_resolved_issues(start_date: str, end_date: str, assignee: str, auth_jira: JIRA) -&gt; List[Any]:\n    \"\"\"Get the list of resolved issues for the specified assignee between the start date and end date.\n\n    Args:\n        start_date (str): The start date in the format 'YYYY-MM-DD'\n        end_date (str): The end date in the format 'YYYY-MM-DD'\n        assignee (str): The assignee\n        auth_jira (JIRA): The authenticated JIRA object\n    Returns:\n        List[Any]: The list of resolved issues\n    \"\"\"\n    query = f\"\"\"resolved &gt;= {start_date} AND resolved &lt;= {end_date}\"\"\"\n\n    if assignee is not None:\n        query = f\"\"\"{query} AND assignee in ({assignee})\"\"\"\n        logging.info(f\"Added assignee '{assignee}' to the query: {query}\")\n\n    return get_issues(query, auth_jira)\n</code></pre>"},{"location":"jira_to_confluence_weekly_progress_report/#jira_python_utils.jira_to_confluence_weekly_progress_report.get_weekly_ranges","title":"<code>get_weekly_ranges(config, config_file)</code>","text":"<p>Retrieve the weekly ranges from the configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Dict[str, Any]</code> <p>The configuration object.</p> required <code>config_file</code> <code>str</code> <p>The configuration file.</p> required <p>Returns:</p> Type Description <code>List[Dict[str, str]]</code> <p>List[Dict[str, str]]: The list of weekly ranges.</p> Source code in <code>jira_python_utils/jira_to_confluence_weekly_progress_report.py</code> <pre><code>def get_weekly_ranges(config: Dict[str, Any], config_file: str) -&gt; List[Dict[str, str]]:\n    \"\"\"Retrieve the weekly ranges from the configuration file.\n\n    Args:\n        config (Dict[str, Any]): The configuration object.\n        config_file (str): The configuration file.\n\n    Returns:\n        List[Dict[str, str]]: The list of weekly ranges.\n    \"\"\"\n\n    if 'weekly' not in config['jira']:\n        print_red(f\"'weekly' section does not exist in configuration file '{config_file}'\")\n        sys.exit(1)\n\n    return config['jira']['weekly']\n</code></pre>"},{"location":"jira_to_confluence_weekly_progress_report/#jira_python_utils.jira_to_confluence_weekly_progress_report.main","title":"<code>main(assignee, config_file, credential_file, logfile, outdir, query)</code>","text":"<p>Retrieve the list of resolved issues for the specified assignee between the start date and end date and create a Confluence page with the list of issues.</p> <p>Parameters:</p> Name Type Description Default <code>assignee</code> <code>str</code> <p>The assignee.</p> required <code>config_file</code> <code>Optional[str]</code> <p>The configuration file.</p> required <code>credential_file</code> <code>Optional[str]</code> <p>The credential file.</p> required <code>logfile</code> <code>Optional[str]</code> <p>The log file.</p> required <code>outdir</code> <code>Optional[str]</code> <p>The output directory.</p> required <code>query</code> <code>str</code> <p>The Jira jql query string.</p> required Source code in <code>jira_python_utils/jira_to_confluence_weekly_progress_report.py</code> <pre><code>@click.command()\n@click.option('--assignee', help='The assignee')\n@click.option('--config_file', type=click.Path(exists=True), help=f\"The configuration file - default is '{DEFAULT_CONFIG_FILE}'\")\n@click.option('--credential_file', help='credential file containing username and password')\n@click.option('--logfile', help=\"The log file\")\n@click.option('--outdir', help=f\"The default is the current working directory - default is '{DEFAULT_OUTDIR}'\")\n@click.option('--query', help='The Jira jql query string')\ndef main(assignee: str, config_file: Optional[str], credential_file: Optional[str], logfile: Optional[str], outdir: Optional[str], query: str):\n    \"\"\"Retrieve the list of resolved issues for the specified assignee between the start date and end date and create a Confluence page with the list of issues.\n\n    Args:\n        assignee (str): The assignee.\n        config_file (Optional[str]): The configuration file.\n        credential_file (Optional[str]): The credential file.\n        logfile (Optional[str]): The log file.\n        outdir (Optional[str]): The output directory.\n        query (str): The Jira jql query string.\n    \"\"\"\n\n    rest_url_file = DEFAULT_URL_FILE\n    check_infile_status(rest_url_file, \"txt\")\n\n    url = get_rest_url(rest_url_file)\n\n    if credential_file is None:\n        credential_file = DEFAULT_CREDENTIAL_FILE\n\n    check_infile_status(credential_file)\n\n    error_ctr = 0\n\n    if error_ctr &gt; 0:\n        print_red(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n    if config_file is None:\n        config_file = DEFAULT_CONFIG_FILE\n        print_yellow(f\"--config_file was not specified and therefore was set to '{config_file}'\")\n\n    check_infile_status(config_file, \"yaml\")\n\n    logging.basicConfig(\n        filename=logfile,\n        format=LOGGING_FORMAT,\n        level=LOG_LEVEL\n    )\n\n    logging.info(f\"Loading configuration from '{config_file}'\")\n    config = yaml.safe_load(pathlib.Path(config_file).read_text())\n\n    if 'jira' not in config:\n        print_red(f\"'jira' section does not exist in configuration file '{config_file}'\")\n        sys.exit(1)\n\n    week_ranges = get_weekly_ranges(config, config_file)\n\n    logging.info(f\"Found '{len(week_ranges)}' week ranges in the configuration file '{config_file}'\")\n\n    if assignee is None and 'assignee' in config['jira']:\n        assignee = config['jira']['assignee']\n        logging.info(f\"Retrieved assignee '{assignee}' from the configuration file '{config_file}'\")\n\n    jira_issue_base_url = get_jira_issue_base_url(config)\n\n    auth_jira, auth = get_auth_jira(credential_file, url)\n\n    for week_range in week_ranges:\n\n        start_date = week_range['start_date']\n        end_date = week_range['end_date']\n        print_yellow(f\"{start_date=} {end_date=}\")\n\n        resolved_issues = get_resolved_issues(\n            start_date,\n            end_date,\n            assignee,\n            auth_jira\n        )\n\n        # in_development_issues = get_in_development_issues(\n        #     start_date,\n        #     end_date,\n        #     assignee,\n        #     auth_jira\n        # )\n\n        # on_hold_issues = get_on_hold_issues(\n        #     start_date,\n        #     end_date,\n        #     assignee,\n        #     auth_jira\n        # )\n\n        # issues = resolved_issues + in_development_issues + on_hold_issues\n        # issues = on_hold_issues\n        issues = resolved_issues\n\n        confluence_page_name = f\"Jay's Weekly Progress Report between '{start_date}' and '{end_date}'\"\n\n        html_content = create_html_content(\n            jira_issue_base_url,\n            confluence_page_name,\n            issues,\n            config,\n        )\n\n        manager = ConfluenceManager(\n            outdir=outdir,\n            config=config,\n            config_file=config_file,\n        )\n\n        manager.create_page(\n            auth=auth,\n            title=confluence_page_name,\n            html_content=html_content\n        )\n</code></pre>"},{"location":"scan_jira_dirs/","title":"Scan Jira Dirs module","text":""},{"location":"scan_jira_dirs/#jira_python_utils.scan_jira_dirs.get_file_list","title":"<code>get_file_list(indir=None, extension=None)</code>","text":"<p>Get the list of files in the specified directory.</p> <p>Parameters:</p> Name Type Description Default <code>indir</code> <code>str</code> <p>The directory to search for files.</p> <code>None</code> <code>extension</code> <code>str</code> <p>The file extension to filter on.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>List[str]: The list of files found in the directory.</p> Source code in <code>jira_python_utils/scan_jira_dirs.py</code> <pre><code>def get_file_list(indir: str = None, extension: str = None) -&gt; list:\n    \"\"\"Get the list of files in the specified directory.\n\n    Args:\n        indir (str): The directory to search for files.\n        extension (str): The file extension to filter on.\n\n    Returns:\n        List[str]: The list of files found in the directory.\n    \"\"\"\n    if extension is None:\n        logging.info(f\"Going to search for files in directory '{indir}'\")\n    else:\n        logging.info(f\"Going to search for files with extension '{extension}' in directory '{indir}'\")\n\n    file_list = []\n    for dirpath, dirnames, filenames in os.walk(indir):\n        if 'venv' in dirpath:\n            logging.info(f\"Going to ignore files in directory '{dirpath}'\")\n            continue\n        for name in filenames:\n            path = os.path.normpath(os.path.join(dirpath, name))\n            if os.path.isfile(path):\n                if extension is not None:\n                    if os.path.endswith('.{extension}'):\n                        file_list.append(path)\n                else:\n                    file_list.append(path)\n\n    return file_list\n</code></pre>"},{"location":"scan_jira_dirs/#jira_python_utils.scan_jira_dirs.main","title":"<code>main(jira_root_dir, logfile, outdir, verbose)</code>","text":"<p>Scan the Jira directory and print the metadata for each Jira issue.</p> <p>Parameters:</p> Name Type Description Default <code>jira_root_dir</code> <code>Optional[str]</code> <p>The root directory where your Jira issue-specific subdirectories are created.</p> required <code>logfile</code> <code>Optional[str]</code> <p>The log file.</p> required <code>outdir</code> <code>Optional[str]</code> <p>The default is the current working directory - default is '{DEFAULT_OUTDIR}'.</p> required <code>verbose</code> <code>Optional[bool]</code> <p>If true, print more info to STDOUT - default is '{DEFAULT_VERBOSE}'.</p> required Source code in <code>jira_python_utils/scan_jira_dirs.py</code> <pre><code>@click.command()\n@click.option('--jira_root_dir', help='Optional: The root directory where your Jira issue-specific subdirectories are created')\n@click.option('--logfile', help=\"Optional: The log file\")\n@click.option('--outdir', help=f\"Optional: The default is the current working directory - default is '{DEFAULT_OUTDIR}'\")\n@click.option('--verbose', is_flag=True, help=f\"Will print more info to STDOUT - default is '{DEFAULT_VERBOSE}'\")\ndef main(jira_root_dir: Optional[str], logfile: Optional[str], outdir: Optional[str], verbose: Optional[bool]):\n    \"\"\"Scan the Jira directory and print the metadata for each Jira issue.\n\n    Args:\n        jira_root_dir (Optional[str]): The root directory where your Jira issue-specific subdirectories are created.\n        logfile (Optional[str]): The log file.\n        outdir (Optional[str]): The default is the current working directory - default is '{DEFAULT_OUTDIR}'.\n        verbose (Optional[bool]): If true, print more info to STDOUT - default is '{DEFAULT_VERBOSE}'.\n    \"\"\"\n\n    error_ctr = 0\n\n    if jira_root_dir is None:\n        print_red(\"--jira_root_dir was not specified\")\n        error_ctr += 1\n\n    if error_ctr &gt; 0:\n        print_red(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n    if verbose is None:\n        verbose = DEFAULT_VERBOSE\n        print_yellow(f\"--verbose was not specified and therefore was set to '{verbose}'\")\n\n    logging.basicConfig(\n        filename=logfile,\n        format=LOGGING_FORMAT,\n        level=LOG_LEVEL\n    )\n\n    scan_jira_dir(jira_root_dir, verbose)\n</code></pre>"},{"location":"scan_jira_dirs/#jira_python_utils.scan_jira_dirs.scan_jira_dir","title":"<code>scan_jira_dir(jira_root_dir, verbose=DEFAULT_VERBOSE)</code>","text":"<p>Scan the Jira directory and print the metadata for each Jira issue.</p> <p>Parameters:</p> Name Type Description Default <code>jira_root_dir</code> <code>str</code> <p>The root directory where your Jira issue-specific subdirectories are created.</p> required <code>verbose</code> <code>bool</code> <p>If true, print more info to STDOUT. Defaults to DEFAULT_VERBOSE.</p> <code>DEFAULT_VERBOSE</code> Source code in <code>jira_python_utils/scan_jira_dirs.py</code> <pre><code>def scan_jira_dir(jira_root_dir: str, verbose: bool = DEFAULT_VERBOSE) -&gt; None:\n    \"\"\"Scan the Jira directory and print the metadata for each Jira issue.\n\n    Args:\n        jira_root_dir (str): The root directory where your Jira issue-specific subdirectories are created.\n        verbose (bool, optional): If true, print more info to STDOUT. Defaults to DEFAULT_VERBOSE.\n    \"\"\"\n\n    check_indir_status(jira_root_dir, \"metadata.json\")\n\n    file_list = get_file_list(jira_root_dir, verbose)\n    for f in file_list:\n        check_infile_status(f)\n\n        with open(f, 'r') as jf:\n            jira_dict = json.load(jf)\n            jira_id = jira_dict['jira_id']\n            url = jira_dict['url']\n            title = jira_dict['title']\n            date = jira_dict['date']\n            print(f\"\\n\\nJira ID: {jira_id}\")\n            print(f\"Title: {title}\")\n            print(f\"Date: {date}\")\n            print(f\"URL: {url}\")\n            print(f\"File: {f}\")\n</code></pre>"},{"location":"search_readme/","title":"Search README.md module","text":"<p>Search for Jira README.md, parse the file and output summary details.</p>"},{"location":"search_readme/#jira_python_utils.search_readme.display_summary_details","title":"<code>display_summary_details(exclude, lookup, infile, verbose=constants.DEFAULT_VERBOSE)</code>","text":"<p>Display the summary details.</p> <p>Parameters:</p> Name Type Description Default <code>exclude</code> <code>str</code> <p>Comma-separated list fields to exclude from the summary details.</p> required <code>lookup</code> <code>Dict[str, str]</code> <p>The lookup dictionary containing the field and value.</p> required <code>infile</code> <code>str</code> <p>The README.md file to be analyzed.</p> required <code>verbose</code> <code>bool</code> <p>If True, more details to STDOUT. Defaults to constants.DEFAULT_VERBOSE.</p> <code>DEFAULT_VERBOSE</code> Source code in <code>jira_python_utils/search_readme.py</code> <pre><code>def display_summary_details(\n    exclude: str,\n    lookup: Dict[str, str],\n    infile: str,\n    verbose: bool = constants.DEFAULT_VERBOSE\n    ) -&gt; None:\n    \"\"\"Display the summary details.\n\n    Args:\n        exclude (str): Comma-separated list fields to exclude from the summary details.\n        lookup (Dict[str, str]): The lookup dictionary containing the field and value.\n        infile (str): The README.md file to be analyzed.\n        verbose (bool, optional): If True, more details to STDOUT. Defaults to constants.DEFAULT_VERBOSE.\n    \"\"\"\n    exclude_list = None\n    if exclude:\n        exclude_list = [e.strip() for e in exclude.split(\",\")]\n\n    for field in DEFAULT_ORDER:\n        if exclude_list and field in exclude_list:\n            logging.info(f\"Excluding field '{field}'\")\n            continue\n        if field in lookup:\n            console.print(f\"{field}: {lookup[field]}\")\n        else:\n            if verbose:\n                console.print(f\"{field}: Not found\")\n</code></pre>"},{"location":"search_readme/#jira_python_utils.search_readme.main","title":"<code>main(exclude, infile, logfile, outdir, verbose)</code>","text":"<p>Search for Jira README.md, parse the file and output summary details.</p> Source code in <code>jira_python_utils/search_readme.py</code> <pre><code>@click.command()\n@click.option('--exclude', help='Optional: Comma-separated list fields to exclude from the summary details.')\n@click.option('--infile', help='Required: The README.md file to be analyzed.')\n@click.option('--logfile', help=\"Optional: The log file.\")\n@click.option('--outdir', help=f\"Optional: The default is the current working directory - default is '{DEFAULT_OUTDIR}'.\")\n@click.option('--verbose', is_flag=True, help=f\"Will print more info to STDOUT - default is '{constants.DEFAULT_VERBOSE}'.\", callback=validate_verbose)\ndef main(\n    exclude: str,\n    infile: str,\n    logfile: Optional[str],\n    outdir: Optional[str],\n    verbose: Optional[bool]\n    ):\n    \"\"\"Search for Jira README.md, parse the file and output summary details.\"\"\"\n\n\n    error_ctr = 0\n\n    if infile is None:\n        print_red(\"--infile was not specified\")\n        error_ctr += 1\n\n    if error_ctr &gt; 0:\n        print_red(\"Required parameter(s) not defined\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    check_infile_status(infile, \"md\")\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n    if verbose is None:\n        verbose = constants.DEFAULT_VERBOSE\n        print_yellow(f\"--verbose was not specified and therefore was set to '{verbose}'\")\n\n\n    logging.basicConfig(\n        filename=logfile,\n        format=constants.LOGGING_FORMAT,\n        level=constants.LOG_LEVEL\n    )\n\n    process_readme(\n        exclude,\n        infile,\n        logfile,\n        outdir,\n        verbose=constants.DEFAULT_VERBOSE\n    )\n\n    if verbose:\n        console.print(f\"The log file is '{logfile}'.\")\n        print_green(f\"Execution of '{os.path.abspath(__file__)}' completed.\")\n</code></pre>"},{"location":"search_readme/#jira_python_utils.search_readme.process_readme","title":"<code>process_readme(exclude, infile, logfile, outdir, verbose=constants.DEFAULT_VERBOSE)</code>","text":"<p>Parse the README.md and output the summary details.</p> <p>Parameters:</p> Name Type Description Default <code>exclude</code> <code>str</code> <p>Comma-separated list fields to exclude from the summary details.</p> required <code>infile</code> <code>str</code> <p>The README.md file to be analyzed.</p> required <code>logfile</code> <code>str</code> <p>The log file.</p> required <code>outdir</code> <code>str</code> <p>The output directory.</p> required <code>verbose</code> <code>bool</code> <p>If True, more details to STDOUT. Defaults to constants.DEFAULT_VERBOSE.</p> <code>DEFAULT_VERBOSE</code> Source code in <code>jira_python_utils/search_readme.py</code> <pre><code>def process_readme(\n    exclude: str,\n    infile: str,\n    logfile: str,\n    outdir: str,\n    verbose: bool = constants.DEFAULT_VERBOSE\n    ) -&gt; None:\n    \"\"\"Parse the README.md and output the summary details.\n\n    Args:\n        exclude (str): Comma-separated list fields to exclude from the summary details.\n        infile (str): The README.md file to be analyzed.\n        logfile (str): The log file.\n        outdir (str): The output directory.\n        verbose (bool, optional): If True, more details to STDOUT. Defaults to constants.DEFAULT_VERBOSE.\n    \"\"\"\n    logging.info(f\"Will read file '{infile}'\")\n    line_ctr = 0\n    lookup = {}\n    with open(infile, 'r') as f:\n        for line in f:\n            line_ctr += 1\n            line = line.strip()\n\n\n            if line.lower().startswith(\"# jira id:\") or line.lower().startswith(\"# jira:\"):\n                jira_id = line.split(\":\")[1].strip()\n                lookup[\"jira_id\"] = jira_id\n                logging.info(f\"Found Jira ID '{jira_id}' at line '{line_ctr}'\")\n            elif line.lower().startswith(\"# jira \"):\n                jira_id = line.replace(\"# Jira\", \"\").strip()\n                lookup[\"jira_id\"] = jira_id\n                logging.info(f\"Found Jira ID '{jira_id}' at line '{line_ctr}'\")\n            elif line.lower().startswith(\"keywords:\"):\n                keywords = line.split(\":\")[1].strip()\n                lookup[\"keywords\"] = keywords\n                logging.info(f\"Found keywords '{keywords}' at line '{line_ctr}'\")\n            elif line.lower().startswith(\"codebase:\"):\n                codebase = line.split(\":\")[1].strip()\n                lookup[\"codebase\"] = codebase\n                logging.info(f\"Found codebase '{codebase}' at line '{line_ctr}'\")\n            elif line.lower().startswith(\"date-created:\"):\n                date_created = line.split(\":\")[1].strip()\n                lookup[\"date_created\"] = date_created\n                logging.info(f\"Found date_created '{date_created}' at line '{line_ctr}'\")\n            elif line.lower().startswith(\"date-completed:\"):\n                date_completed = line.split(\":\")[1].strip()\n                lookup[\"date_completed\"] = date_completed\n                logging.info(f\"Found date_completed '{date_completed}' at line '{line_ctr}'\")\n            elif line.lower().startswith(\"due-date:\"):\n                due_date = line.split(\":\")[1].strip()\n                lookup[\"due_date\"] = due_date\n                logging.info(f\"Found due_date '{due_date}' at line '{line_ctr}'\")\n            elif line.lower().startswith(\"status:\"):\n                status = line.split(\":\")[1].strip()\n                lookup[\"status\"] = status\n                logging.info(f\"Found status '{status}' at line '{line_ctr}'\")\n            elif line.lower().startswith(\"issue-type:\"):\n                issue_type = line.split(\":\")[1].strip()\n                lookup[\"issue_type\"] = issue_type\n                logging.info(f\"Found issue_type '{issue_type}' at line '{line_ctr}'\")\n            elif line.lower().startswith(\"reference: https://\"):\n                reference = line.replace(\"Reference: \", \"\").strip()\n                lookup[\"reference\"] = reference\n                logging.info(f\"Found reference '{reference}' at line '{line_ctr}'\")\n\n\n    if line_ctr &gt; 0:\n        logging.info(f\"Read '{line_ctr}' lines from file '{infile}'\")\n    else:\n        logging.info(\"Did not read any lines from file '{infile}'\")\n\n    display_summary_details(exclude, lookup, infile, verbose)\n</code></pre>"},{"location":"search_readme/#jira_python_utils.search_readme.validate_verbose","title":"<code>validate_verbose(ctx, param, value)</code>","text":"<p>Validate the validate option.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The click context.</p> required <code>param</code> <code>str</code> <p>The parameter.</p> required <code>value</code> <code>bool</code> <p>The value.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>The value.</p> Source code in <code>jira_python_utils/search_readme.py</code> <pre><code>def validate_verbose(ctx, param, value):\n    \"\"\"Validate the validate option.\n\n    Args:\n        ctx (Context): The click context.\n        param (str): The parameter.\n        value (bool): The value.\n\n    Returns:\n        bool: The value.\n    \"\"\"\n\n    if value is None:\n        click.secho(\"--verbose was not specified and therefore was set to 'True'\", fg='yellow')\n        return constants.DEFAULT_VERBOSE\n    return value\n</code></pre>"}]}